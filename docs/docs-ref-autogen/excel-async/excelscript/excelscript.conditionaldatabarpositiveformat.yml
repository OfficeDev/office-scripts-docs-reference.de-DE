### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalDataBarPositiveFormat:interface'
    summary: Stellt ein Daten leisten Format mit bedingtem Format für die positive Seite des Datenbalkens dar.
    name: Excel.ConditionalDataBarPositiveFormat
    fullName: Excel.ConditionalDataBarPositiveFormat
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.ConditionalDataBarPositiveFormat#borderColor:member'
      - 'excel!Excel.ConditionalDataBarPositiveFormat#fillColor:member'
      - 'excel!Excel.ConditionalDataBarPositiveFormat#gradientFill:member'
      - 'excel!Excel.ConditionalDataBarPositiveFormat#load:member(1)'
  - uid: 'excel!Excel.ConditionalDataBarPositiveFormat#borderColor:member'
    summary: 'HTML-Farbcode, der die Farbe der Rahmenlinie, der Form \# RRGGBB (z.b. "FFA500") oder als benannte HTML-Farbe (beispielsweise "Orange") darstellt. "" (leere Zeichenfolge), wenn kein Rahmen vorhanden oder festgelegt ist.'
    name: borderColor
    fullName: borderColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'borderColor: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.ConditionalDataBarPositiveFormat#fillColor:member'
    summary: 'HTML-Farbcode, der die Füllfarbe des Formulars \# RRGGBB (z.b. "FFA500") oder als benannte HTML-Farbe (beispielsweise "Orange") darstellt.'
    name: fillColor
    fullName: fillColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'fillColor: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.ConditionalDataBarPositiveFormat#gradientFill:member'
    summary: 'Gibt an, ob der Datenbalken einen Farbverlauf aufweist.'
    name: gradientFill
    fullName: gradientFill
    langs:
      - typeScript
    type: property
    syntax:
      content: 'gradientFill: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.ConditionalDataBarPositiveFormat#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen `context.sync()` vor dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'