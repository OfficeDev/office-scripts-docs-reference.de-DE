### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:interface'
    summary: Eine bereichsbezogene Auflistung von benutzerdefinierten XML-Komponenten. Eine bereichsbezogene Auflistung ist das Ergebnis einer Operation (beispielsweise das Filtern nach Namespace). Eine bereichsbezogene Sammlung kann nicht weiter auf den Bereich beschränkt werden.
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
    summary: Ruft die Anzahl von CustomXml-Komponenten in dieser Sammlung ab.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
    summary: Ruft eine benutzerdefinierte XML-Komponente basierend auf ihrer ID ab.
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:interface'
        description: ''
      parameters:
        - id: id
          description: 'ID des Objekts, das abgerufen werden soll.'
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
    summary: 'Ruft eine benutzerdefinierte XML-Komponente basierend auf ihrer ID ab. Wenn das CustomXMLPart-Objekt nicht vorhanden ist, wird die IsNull-Eigenschaft des Rückgabe Objekts auf true festgelegt.'
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:interface'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let settings = context.workbook.settings;
              let xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  let xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      let readableXml = addLineBreaksToXML(xmlBlob.value);
                      let strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          }
          ```
      parameters:
        - id: id
          description: 'ID des Objekts, das abgerufen werden soll.'
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
    summary: 'Wenn die Sammlung genau ein Element enthält, gibt diese Methode es zurück. Andernfalls erzeugt diese Methode einen Fehler.'
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:interface'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
    summary: 'Wenn die Sammlung genau ein Element enthält, gibt diese Methode es zurück. Andernfalls gibt diese Methode NULL zurück.'
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:interface'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen `context.sync()` vor dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CustomXmlPart:interface'
    name: CustomXmlPart
    fullName: Excel.CustomXmlPart