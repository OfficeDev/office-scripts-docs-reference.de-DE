### YamlMime:TSType
name: Excel.DataValidation
uid: excel!Excel.DataValidation:interface
package: excel!
fullName: Excel.DataValidation
summary: Stellt die Datenüberprüfung dar, die auf den aktuellen Bereich angewendet wird. Weitere Informationen zum Daten Validierungs Objektmodell finden Sie unter [Hinzufügen von Datenüberprüfung zu Excel-Bereichen](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: errorAlert
  uid: excel!Excel.DataValidation#errorAlert:member
  package: excel!
  fullName: errorAlert
  summary: Fehlermeldung, wenn Benutzer ungültige Daten eingibt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'errorAlert: DataValidationErrorAlert;'
    return:
      type: <xref uid="excel!Excel.DataValidationErrorAlert:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let commentsRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Comments\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    commentsRange.dataValidation.clear();   \n\n    // If the value of A2 is contained in the value of C2, then \n    // SEARCH(A2,C2) returns the number where it begins. Otherwise,\n    // it does not return a number.\n    let redundantStringRule = {\n        custom: {\n            formula: \"=NOT(ISNUMBER(SEARCH(A2,C2)))\"\n        }\n    };\n    commentsRange.dataValidation.rule = redundantStringRule;\n    commentsRange.dataValidation.errorAlert = {\n        message: \"It is redundant to include the baby name in the comment.\",\n        showAlert: true,\n        style: \"Information\",\n        title: \"Baby Name in Comment\"\n    };\n\n    await context.sync();\n}\n```"
- name: ignoreBlanks
  uid: excel!Excel.DataValidation#ignoreBlanks:member
  package: excel!
  fullName: ignoreBlanks
  summary: Gibt an, ob die Datenüberprüfung für leere Zellen durchgeführt wird, es wird standardmäßig auf true festgelegt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ignoreBlanks: boolean;'
    return:
      type: boolean
- name: prompt
  uid: excel!Excel.DataValidation#prompt:member
  package: excel!
  fullName: prompt
  summary: Eingabeaufforderung, wenn Benutzer eine Zelle auswählen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prompt: DataValidationPrompt;'
    return:
      type: <xref uid="excel!Excel.DataValidationPrompt:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let rankingRange = sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Ranking\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    rankingRange.dataValidation.clear();\n\n    let greaterThanZeroRule = {\n        wholeNumber: {\n            formula1: 0,\n            operator: Excel.DataValidationOperator.greaterThan\n        }\n    };\n    rankingRange.dataValidation.rule = greaterThanZeroRule;\n\n    rankingRange.dataValidation.prompt = {\n        message: \"Please enter a positive number.\",\n        showPrompt: true,\n        title: \"Positive numbers only.\"\n    };\n\n    rankingRange.dataValidation.errorAlert = {\n        message: \"Sorry, only positive numbers are allowed\",\n        showAlert: true,\n        style: \"Stop\",\n        title: \"Negative Number Entered\"\n    };\n\n    await context.sync();\n}\n```"
- name: rule
  uid: excel!Excel.DataValidation#rule:member
  package: excel!
  fullName: rule
  summary: Daten Überprüfungsregel, die unterschiedliche Typen von Daten Überprüfungskriterien enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rule: DataValidationRule;'
    return:
      type: <xref uid="excel!Excel.DataValidationRule:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Decision\");\n    let nameRange = \n        sheet.tables.getItem(\"NameOptionsTable\").columns.getItem(\"Baby Name\").getDataBodyRange();\n\n    // When you are developing, it is a good practice to\n    // clear the dataValidation object with each run of your code.\n    nameRange.dataValidation.clear();\n\n    let nameSourceRange = context.workbook.worksheets.getItem(\"Names\").getRange(\"A1:A3\");\n\n    let approvedListRule = {\n        list: {\n            inCellDropDown: true,\n            source: nameSourceRange\n        }\n    };\n    nameRange.dataValidation.rule = approvedListRule;\n\n    await context.sync();\n}\n```"
- name: type
  uid: excel!Excel.DataValidation#type:member
  package: excel!
  fullName: type
  summary: Informationen zum Typ der Datenüberprüfung finden Sie unter Excel.DataValidationType.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      readonly type:
                  | DataValidationType
                  | "None"
                  | "WholeNumber"
                  | "Decimal"
                  | "List"
                  | "Date"
                  | "Time"
                  | "TextLength"
                  | "Custom"
                  | "Inconsistent"
                  | "MixedCriteria";
    return:
      type: >-
        | <xref uid="excel!Excel.DataValidationType:enum" />
                    | "None"
                    | "WholeNumber"
                    | "Decimal"
                    | "List"
                    | "Date"
                    | "Time"
                    | "TextLength"
                    | "Custom"
                    | "Inconsistent"
                    | "MixedCriteria"
- name: valid
  uid: excel!Excel.DataValidation#valid:member
  package: excel!
  fullName: valid
  summary: Gibt an, ob alle Zellwerte entsprechend den Datenüberprüfungsregeln gültig sind. Gibt true zurück, wenn alle Zellenwerte gültig sind, oder false, wenn alle Zellenwerte ungültig sind. Gibt NULL zurück, wenn es sowohl gültige als auch ungültige Zellenwerte innerhalb des Bereichs gibt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly valid: boolean;'
    return:
      type: boolean
methods:
- name: clear()
  uid: excel!Excel.DataValidation#clear:member(1)
  package: excel!
  fullName: clear()
  summary: Löscht die Datenüberprüfung aus dem aktuellen Bereich.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: getInvalidCells()
  uid: excel!Excel.DataValidation#getInvalidCells:member(1)
  package: excel!
  fullName: getInvalidCells()
  summary: Gibt ein RangeAreas-Objekt, das einen oder mehrere rechteckige Bereiche umfasst, mit ungültigen Zellwerten zurück. Wenn alle Zellwerte gültig sind, löst diese Funktion einen ItemNotFound Fehler aus.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCells(): RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: getInvalidCellsOrNullObject()
  uid: excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)
  package: excel!
  fullName: getInvalidCellsOrNullObject()
  summary: Gibt ein RangeAreas-Objekt, das einen oder mehrere rechteckige Bereiche umfasst, mit ungültigen Zellwerten zurück. Wenn alle Zellwerte gültig sind, gibt diese Funktion NULL zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCellsOrNullObject(): RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.DataValidation#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 6ba161c663afaf28f62aa0ad1f6b2e6bc3a2d9be
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49416288"
