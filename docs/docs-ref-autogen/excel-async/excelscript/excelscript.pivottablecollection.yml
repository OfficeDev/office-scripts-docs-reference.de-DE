### YamlMime:TSType
name: Excel.PivotTableCollection
uid: excel!Excel.PivotTableCollection:interface
package: excel!
fullName: Excel.PivotTableCollection
summary: Stellt eine Auflistung aller PivotTables dar, die Teil der Arbeitsmappe oder des Arbeitsblatts sind.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: add(name, source, destination)
  uid: excel!Excel.PivotTableCollection#add:member(1)
  package: excel!
  fullName: add(name, source, destination)
  summary: Fügen Sie eine PivotTable basierend auf den angegebenen Quelldaten hinzu, und fügen Sie Sie in der oberen linken Zelle des Zielbereichs ein.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      add(
                  name: string,
                  source: Range | string | Table,
                  destination: Range | string
              ): PivotTable;
    parameters:
    - id: name
      description: Der Name der neuen PivotTable.
      type: string
    - id: source
      description: Die Quelldaten für die neue PivotTable kann dies entweder ein Bereich (oder eine Zeichenfolgen Adresse mit dem Arbeitsblattnamen) oder eine Tabelle sein.
      type: <xref uid="excel!Excel.Range:interface" /> | string | <xref uid="excel!Excel.Table:interface" />
    - id: destination
      description: Die Zelle in der oberen linken Ecke des Zielbereichs des PivotTable-Berichts (der Bereich auf dem Arbeitsblatt, in dem der resultierende Bericht platziert wird).
      type: "<xref uid=\"excel!Excel.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="excel!Excel.PivotTable:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let rangeToAnalyze = context.workbook.worksheets.getItem(\"Data\").getRange(\"A1:E21\");\n    let rangeToPlacePivot = context.workbook.worksheets.getItem(\"Pivot\").getRange(\"A2\");\n    context.workbook.worksheets.getItem(\"Pivot\").pivotTables.add(\"Farm Sales\", rangeToAnalyze, rangeToPlacePivot);\n\n    await context.sync();\n}\n```"
- name: getCount()
  uid: excel!Excel.PivotTableCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: Ruft die Anzahl von PivotTables in der Auflistung ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): ClientResult<number>;'
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: getItem(name)
  uid: excel!Excel.PivotTableCollection#getItem:member(1)
  package: excel!
  fullName: getItem(name)
  summary: Ruft eine PivotTable anhand des Namens ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(name: string): PivotTable;'
    parameters:
    - id: name
      description: Name der abzurufenden PivotTable.
      type: string
    return:
      type: <xref uid="excel!Excel.PivotTable:interface" />
      description: ''
- name: getItemOrNullObject(name)
  uid: excel!Excel.PivotTableCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(name)
  summary: Ruft eine PivotTable anhand des Namens ab. Wenn die PivotTable nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(name: string): PivotTable;'
    parameters:
    - id: name
      description: Name der abzurufenden PivotTable.
      type: string
    return:
      type: <xref uid="excel!Excel.PivotTable:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.PivotTableCollection#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: void
      description: ''
- name: refreshAll()
  uid: excel!Excel.PivotTableCollection#refreshAll:member(1)
  package: excel!
  fullName: refreshAll()
  summary: Aktualisiert alle PivotTables in der Sammlung.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAll(): void;'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 4097e746efd052c47ad386b3f52711778b10c0ee
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49418835"
