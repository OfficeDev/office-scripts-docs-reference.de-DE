### YamlMime:TSType
name: Excel.WorksheetCollection
uid: excel!Excel.WorksheetCollection:interface
package: excel!
fullName: Excel.WorksheetCollection
summary: Stellt eine Auflistung der Arbeitsblattobjekte dar, die Teil der Arbeitsmappe sind.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: add(name)
  uid: excel!Excel.WorksheetCollection#add:member(1)
  package: excel!
  fullName: add(name)
  summary: Fügt der Arbeitsmappe ein neues Arbeitsblatt hinzu. Das Arbeitsblatt wird automatisch am Ende der vorhandenen Arbeitsblättern hinzugefügt. Wenn Sie das neu hinzugefügte Arbeitsblatt aktivieren möchten, rufen Sie „.activate()“ dazu auf.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(name?: string): Worksheet;'
    parameters:
    - id: name
      description: Optional. Der Name des hinzuzufügenden Arbeitsblatts. Falls angegeben, sollte der Name eindeutig sein. Falls nicht angegeben, bestimmt Excel den Namen des neuen Arbeitsblatts.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getActiveWorksheet()
  uid: excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)
  package: excel!
  fullName: getActiveWorksheet()
  summary: Ruft das derzeit aktive Arbeitsblatt in der Arbeitsmappe ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getCount(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getCount:member(1)
  package: excel!
  fullName: getCount(visibleOnly)
  summary: Ruft die Anzahl von Arbeitsblättern in der Auflistung ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(visibleOnly?: boolean): ClientResult<number>;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: getFirst(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getFirst:member(1)
  package: excel!
  fullName: getFirst(visibleOnly)
  summary: Ruft das erste Arbeitsblatt in der Sammlung ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    let firstSheet = sheets.getFirst().getNext();\n    let lastSheet = sheets.getLast();\n    let firstTaxRateRange = firstSheet.getRange(\"B2\");\n    let lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n}\n```"
- name: getItem(key)
  uid: excel!Excel.WorksheetCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: string): Worksheet;'
    parameters:
    - id: key
      description: Der Name oder die ID des Arbeitsblatts.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getItemOrNullObject(key)
  uid: excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(key)
  summary: Ruft das Arbeitsblattobjekt mithilfe des Namens oder der ID ab. Wenn das Arbeitsblatt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(key: string): Worksheet;'
    parameters:
    - id: key
      description: Der Name oder die ID des Arbeitsblatts.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getLast(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getLast:member(1)
  package: excel!
  fullName: getLast(visibleOnly)
  summary: Ruft das letzte Arbeitsblatt in der Sammlung ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLast(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    let firstSheet = sheets.getFirst().getNext();\n    let lastSheet = sheets.getLast();\n    let firstTaxRateRange = firstSheet.getRange(\"B2\");\n    let lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n}\n```"
- name: load(propertyNames)
  uid: excel!Excel.WorksheetCollection#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 61e5897d3f1e998cf0178cdd645dea173b17d823
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49418121"
