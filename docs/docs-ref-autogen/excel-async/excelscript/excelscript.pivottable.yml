### YamlMime:TSType
name: Excel.PivotTable
uid: excel!Excel.PivotTable:interface
package: excel!
fullName: Excel.PivotTable
summary: Stellt eine Excel-PivotTable dar. Weitere Informationen zum PivotTable-Objektmodell finden Sie [unter Arbeiten mit PivotTables mithilfe der Excel-JavaScript-API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-pivottables)<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: columnHierarchies
  uid: excel!Excel.PivotTable#columnHierarchies:member
  package: excel!
  fullName: columnHierarchies
  summary: Die Pivot-Hierarchien der Spalten von PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly columnHierarchies: RowColumnPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.RowColumnPivotHierarchyCollection:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");       \n\n    // check if the PivotTable already has a column\n    let column = pivotTable.columnHierarchies.getItemOrNullObject(\"Farm\");\n    column.load(\"id\");\n    await context.sync();\n\n    if (column.isNullObject) {\n        // ading the farm column to the column hierarchy automatically removes it from the row hierarchy\n        pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n    } else {\n        pivotTable.columnHierarchies.remove(column);\n    }\n\n    await context.sync();\n}\n```"
- name: dataHierarchies
  uid: excel!Excel.PivotTable#dataHierarchies:member
  package: excel!
  fullName: dataHierarchies
  summary: Die Pivot-Hierarchien der Daten von PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataHierarchies: DataPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.DataPivotHierarchyCollection:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold at Farm\"));\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold Wholesale\"));\n\n    await context.sync();\n}\n```"
- name: enableDataValueEditing
  uid: excel!Excel.PivotTable#enableDataValueEditing:member
  package: excel!
  fullName: enableDataValueEditing
  summary: Gibt an, ob die PivotTable das Bearbeiten von Werten im Daten Text durch den Benutzer zulässt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableDataValueEditing: boolean;'
    return:
      type: boolean
- name: filterHierarchies
  uid: excel!Excel.PivotTable#filterHierarchies:member
  package: excel!
  fullName: filterHierarchies
  summary: Die Pivot-Hierarchien der Filter von PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly filterHierarchies: FilterPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.FilterPivotHierarchyCollection:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function filter(functionType: Excel.AggregationFunction) {\n    async function main(context: Excel.RequestContext) {\n        let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n        let filters = pivotTable.filterHierarchies;\n        let filter = filters.getItemOrNullObject(\"Classification\");\n        filter.load();\n        await context.sync();\n\n        // add the Classification hierarchy to the filter, if it's not already there\n        if (filter.isNullObject) {\n            filters.add(pivotTable.hierarchies.getItem(\"Classification\"));\n            await context.sync();\n        }\n    }\n}\n```"
- name: hierarchies
  uid: excel!Excel.PivotTable#hierarchies:member
  package: excel!
  fullName: hierarchies
  summary: Die Pivot-Hierarchien von PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly hierarchies: PivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.PivotHierarchyCollection:interface" />
- name: id
  uid: excel!Excel.PivotTable#id:member
  package: excel!
  fullName: id
  summary: Die ID der PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: layout
  uid: excel!Excel.PivotTable#layout:member
  package: excel!
  fullName: layout
  summary: Das PivotLayout-Objekt, das das Layout und die visuelle Struktur von PivotTable beschreibt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly layout: PivotLayout;'
    return:
      type: <xref uid="excel!Excel.PivotLayout:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.layout.load(\"layoutType\");\n    await context.sync();\n\n    // cycle between the three layout types\n    if (pivotTable.layout.layoutType === \"Compact\") {\n        pivotTable.layout.layoutType = \"Outline\";\n    } else if (pivotTable.layout.layoutType === \"Outline\") {\n        pivotTable.layout.layoutType = \"Tabular\";\n    } else {\n        pivotTable.layout.layoutType = \"Compact\";\n    }\n    await context.sync();\n    console.log(\"Pivot layout is now \" + pivotTable.layout.layoutType);\n}\n```"
- name: name
  uid: excel!Excel.PivotTable#name:member
  package: excel!
  fullName: name
  summary: Der Name der PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: rowHierarchies
  uid: excel!Excel.PivotTable#rowHierarchies:member
  package: excel!
  fullName: rowHierarchies
  summary: Die Pivot-Hierarchien der Zeilen von PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowHierarchies: RowColumnPivotHierarchyCollection;'
    return:
      type: <xref uid="excel!Excel.RowColumnPivotHierarchyCollection:interface" />
- name: useCustomSortLists
  uid: excel!Excel.PivotTable#useCustomSortLists:member
  package: excel!
  fullName: useCustomSortLists
  summary: Gibt an, ob die PivotTable beim Sortieren benutzerdefinierte Listen verwendet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'useCustomSortLists: boolean;'
    return:
      type: boolean
- name: worksheet
  uid: excel!Excel.PivotTable#worksheet:member
  package: excel!
  fullName: worksheet
  summary: Das Arbeitsblatt, das die aktuelle PivotTable enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
methods:
- name: delete()
  uid: excel!Excel.PivotTable#delete:member(1)
  package: excel!
  fullName: delete()
  summary: Aktualisiert PivotTable
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    context.workbook.worksheets.getItem(\"Pivot\").pivotTables.getItem(\"Farm Sales\").delete();\n\n    await context.sync();\n}\n```"
- name: load(propertyNames)
  uid: excel!Excel.PivotTable#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: void
      description: ''
- name: refresh()
  uid: excel!Excel.PivotTable#refresh:member(1)
  package: excel!
  fullName: refresh()
  summary: Aktualisiert die PivotTable.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refresh(): void;'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 2825ad04ac5fbcdf1c4f1de1975d16e9b8ea3d69
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49413328"
