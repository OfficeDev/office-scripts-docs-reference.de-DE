### YamlMime:TSType
name: Excel.RangeHyperlink
uid: excel!Excel.RangeHyperlink:interface
package: excel!
fullName: Excel.RangeHyperlink
summary: Stellt die erforderlichen Zeichenfolgen zum Abrufen/Festlegen eines Hyperlink-Objekts (XHL) dar.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: address
  uid: excel!Excel.RangeHyperlink#address:member
  package: excel!
  fullName: address
  summary: Stellt das Ziel der URL für den Link dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'address?: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n}\n```"
- name: documentReference
  uid: excel!Excel.RangeHyperlink#documentReference:member
  package: excel!
  fullName: documentReference
  summary: Stellt das Dokumentreferenz Ziel für den Hyperlink dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'documentReference?: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A9:A11\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a location within the workbook\n    // for each product name in the second table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Navigate to the '\" + cellText + \"' worksheet\",\n            documentReference: cellText + \"!A1\"\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n}\n```"
- name: screenTip
  uid: excel!Excel.RangeHyperlink#screenTip:member
  package: excel!
  fullName: screenTip
  summary: Stellt die Zeichenfolge dar, die angezeigt wird, wenn mit dem Mauszeiger über den Link gefahren wird.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'screenTip?: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n}\n```"
- name: textToDisplay
  uid: excel!Excel.RangeHyperlink#textToDisplay:member
  package: excel!
  fullName: textToDisplay
  summary: Stellt die Zeichenfolge dar, die in der oberen linken Zelle des Bereichs angezeigt wird.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'textToDisplay?: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n}\n```"
metadata:
  ms.openlocfilehash: 2df955869b5d33510561185659ac67a18e17d0a7
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49413181"
