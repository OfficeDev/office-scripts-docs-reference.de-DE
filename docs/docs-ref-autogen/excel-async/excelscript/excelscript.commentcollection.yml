### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CommentCollection:interface'
    summary: 'Stellt eine Auflistung von comment-Objekten dar, die Teil der Arbeitsmappe sind.'
    name: Excel.CommentCollection
    fullName: Excel.CommentCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.CommentCollection#add:member(1)'
      - 'excel!Excel.CommentCollection#getCount:member(1)'
      - 'excel!Excel.CommentCollection#getItem:member(1)'
      - 'excel!Excel.CommentCollection#getItemAt:member(1)'
      - 'excel!Excel.CommentCollection#getItemByCell:member(1)'
      - 'excel!Excel.CommentCollection#getItemByReplyId:member(1)'
      - 'excel!Excel.CommentCollection#load:member(1)'
  - uid: 'excel!Excel.CommentCollection#add:member(1)'
    summary: 'Erstellt einen neuen Kommentar mit dem angegebenen Inhalt auf der angegebenen Zelle. `InvalidArgument`Wenn der angegebene Bereich größer als eine Zelle ist, wird ein Fehler ausgelöst.'
    name: 'add(cellAddress, content, contentType)'
    fullName: 'add(cellAddress, content, contentType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        add(
                    cellAddress: Range | string,
                    content: CommentRichContent | string,
                    contentType?: ContentType | "Plain" | "Mention"
                ): Comment;
      return:
        type:
          - 'excel!Excel.Comment:interface'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Comments");

              // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.
              sheet.comments.add("A2", "TODO: add data.");
              await context.sync();
          }
          ```
      parameters:
        - id: cellAddress
          description: 'Die Zelle, der der Kommentar hinzugefügt wird. Dies kann ein Range-Objekt oder eine Zeichenfolge sein. Wenn es sich um eine Zeichenfolge handelt, muss Sie die vollständige Adresse enthalten, einschließlich des Blatt namens. `InvalidArgument`Wenn der angegebene Bereich größer als eine Zelle ist, wird ein Fehler ausgelöst.'
          type:
            - 'excel!Excel.CommentCollection#add~0:complex'
        - id: content
          description: Der Inhalt des Kommentars. Dies kann eine Zeichenfolge oder ein CommentRichContent-Objekt sein. Zeichenfolgen werden für nur-Text verwendet. CommentRichContent-Objekte ermöglichen andere Kommentarfeatures wie Erwähnungen.
          type:
            - 'excel!Excel.CommentCollection#add~1:complex'
        - id: contentType
          description: 'Optional. Der Typ des Inhalts, der im Kommentar enthalten ist. Der Standardwert ist Enum.`ContentType.Plain`<!-- -->.'
          type:
            - 'excel!Excel.CommentCollection#add~2:complex'
  - uid: 'excel!Excel.CommentCollection#getCount:member(1)'
    summary: Ruft die Anzahl der Kommentare in der Sammlung ab.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CommentCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.CommentCollection#getItem:member(1)'
    summary: Ruft einen Kommentar aus der Sammlung basierend auf der ID ab.
    name: getItem(commentId)
    fullName: getItem(commentId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(commentId: string): Comment;'
      return:
        type:
          - 'excel!Excel.Comment:interface'
        description: ''
      parameters:
        - id: commentId
          description: Der Bezeichner für den Kommentar.
          type:
            - string
  - uid: 'excel!Excel.CommentCollection#getItemAt:member(1)'
    summary: Ruft einen Kommentar aus der Sammlung basierend auf ihrer Position ab.
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Comment;'
      return:
        type:
          - 'excel!Excel.Comment:interface'
        description: ''
      parameters:
        - id: index
          description: Index-Wert des abzurufenden Objekts. Nullindiziert.
          type:
            - number
  - uid: 'excel!Excel.CommentCollection#getItemByCell:member(1)'
    summary: Ruft den Kommentar aus der angegebenen Zelle ab.
    name: getItemByCell(cellAddress)
    fullName: getItemByCell(cellAddress)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemByCell(cellAddress: Range | string): Comment;'
      return:
        type:
          - 'excel!Excel.Comment:interface'
        description: ''
      parameters:
        - id: cellAddress
          description: 'Die Zelle, auf der sich der Kommentar befindet. Dies kann ein Range-Objekt oder eine Zeichenfolge sein. Wenn es sich um eine Zeichenfolge handelt, muss Sie die vollständige Adresse enthalten, einschließlich des Blatt namens. `InvalidArgument`Wenn der angegebene Bereich größer als eine Zelle ist, wird ein Fehler ausgelöst.'
          type:
            - 'excel!Excel.CommentCollection#getItemByCell~0:complex'
  - uid: 'excel!Excel.CommentCollection#getItemByReplyId:member(1)'
    summary: 'Ruft den Kommentar ab, an den die angegebene Antwort angeschlossen ist.'
    name: getItemByReplyId(replyId)
    fullName: getItemByReplyId(replyId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemByReplyId(replyId: string): Comment;'
      return:
        type:
          - 'excel!Excel.Comment:interface'
        description: ''
      parameters:
        - id: replyId
          description: Der Bezeichner der Kommentar Antwort.
          type:
            - string
  - uid: 'excel!Excel.CommentCollection#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen `context.sync()` vor dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Comment:interface'
    name: Comment
    fullName: Excel.Comment
  - uid: 'excel!Excel.CommentCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.CommentCollection#add~1:complex'
    name: CommentRichContent | string
    fullName: Excel.CommentRichContent | string
    spec.typeScript:
      - uid: 'excel!Excel.CommentRichContent:interface'
        name: CommentRichContent
        fullName: Excel.CommentRichContent
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.CommentCollection#add~2:complex'
    name: ContentType | "Plain" | "Mention"
    fullName: Excel.ContentType | "Plain" | "Mention"
    spec.typeScript:
      - uid: 'excel!Excel.ContentType:enum'
        name: ContentType
        fullName: Excel.ContentType
      - name: |2-
           | "Plain" | "Mention"
                  
        fullName: |2-
           | "Plain" | "Mention"
                  
  - uid: 'excel!Excel.CommentCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CommentCollection#getItemByCell~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'