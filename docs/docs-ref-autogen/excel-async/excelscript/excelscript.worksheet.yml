### YamlMime:TSType
name: Excel.Worksheet
uid: excel!Excel.Worksheet:interface
package: excel!
fullName: Excel.Worksheet
summary: Ein Excel-Arbeitsblatt ist ein Raster von Zellen. Sie kann Daten, Tabellen, Diagramme usw. enthalten. Weitere Informationen zum Arbeitsblatt-Objektmodell finden Sie [unter Arbeiten mit Arbeitsblättern mithilfe der Excel-JavaScript-API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets) .<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: autoFilter
  uid: excel!Excel.Worksheet#autoFilter:member
  package: excel!
  fullName: autoFilter
  summary: Stellt das AutoFilter-Objekt des Arbeitsblatts dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly autoFilter: AutoFilter;'
    return:
      type: <xref uid="excel!Excel.AutoFilter:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let farmData = sheet.getUsedRange();\n\n    // This filter will only show the rows with the top 25% of values in column 3.\n    sheet.autoFilter.apply(farmData, 3, { criterion1: \"25\", filterOn: Excel.FilterOn.topPercent });\n    await context.sync();\n}\n```"
- name: charts
  uid: excel!Excel.Worksheet#charts:member
  package: excel!
  fullName: charts
  summary: Gibt eine Auflistung von Diagrammen zurück, die Teil des Arbeitsblatts sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly charts: ChartCollection;'
    return:
      type: <xref uid="excel!Excel.ChartCollection:interface" />
- name: comments
  uid: excel!Excel.Worksheet#comments:member
  package: excel!
  fullName: comments
  summary: Gibt eine Sammlung aller Kommentarobjekte auf dem Arbeitsblatt zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly comments: CommentCollection;'
    return:
      type: <xref uid="excel!Excel.CommentCollection:interface" />
- name: enableCalculation
  uid: excel!Excel.Worksheet#enableCalculation:member
  package: excel!
  fullName: enableCalculation
  summary: Bestimmt, ob Excel das Arbeitsblatt bei Bedarf neu berechnen sollte. True, wenn Excel das Arbeitsblatt bei Bedarf neu berechnet. False, falls Excel das Arbeitsblatt nicht neu berechnet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type: boolean
- name: freezePanes
  uid: excel!Excel.Worksheet#freezePanes:member
  package: excel!
  fullName: freezePanes
  summary: Ruft ein Objekt ab, das zum Bearbeiten von fixierten Bereichen auf dem Arbeitsblatt verwendet werden kann.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly freezePanes: WorksheetFreezePanes;'
    return:
      type: <xref uid="excel!Excel.WorksheetFreezePanes:interface" />
- name: horizontalPageBreaks
  uid: excel!Excel.Worksheet#horizontalPageBreaks:member
  package: excel!
  fullName: horizontalPageBreaks
  summary: Ruft die Sammlung der horizontalen Seitenumbrüche für das Arbeitsblatt ab. Diese Sammlung enthält nur manuelle Seitenumbrüche.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly horizontalPageBreaks: PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:interface" />
- name: id
  uid: excel!Excel.Worksheet#id:member
  package: excel!
  fullName: id
  summary: Gibt einen Wert zurück, der das Arbeitsblatt in einer bestimmten Arbeitsmappe eindeutig identifiziert. Der Wert des Bezeichners bleibt unverändert, auch wenn das Arbeitsblatt umbenannt oder verschoben wird.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Worksheet#name:member
  package: excel!
  fullName: name
  summary: Der Anzeigename des Arbeitsblatts.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Worksheet#names:member
  package: excel!
  fullName: names
  summary: Auflistung von Namen im Bereich des aktuellen Arbeitsblatts.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:interface" />
- name: pageLayout
  uid: excel!Excel.Worksheet#pageLayout:member
  package: excel!
  fullName: pageLayout
  summary: Ruft das PageLayout-Objekt des Arbeitsblatts ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pageLayout: PageLayout;'
    return:
      type: <xref uid="excel!Excel.PageLayout:interface" />
- name: pivotTables
  uid: excel!Excel.Worksheet#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: Die Sammlung von PivotTables, die Teil des Arbeitsblatts sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:interface" />
- name: position
  uid: excel!Excel.Worksheet#position:member
  package: excel!
  fullName: position
  summary: Die nullbasiert Position des Arbeitsblatts in der Arbeitsmappe.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'position: number;'
    return:
      type: number
- name: protection
  uid: excel!Excel.Worksheet#protection:member
  package: excel!
  fullName: protection
  summary: Gibt das Arbeitsblattschutz-Objekt für ein Arbeitsblatt zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: WorksheetProtection;'
    return:
      type: <xref uid="excel!Excel.WorksheetProtection:interface" />
- name: shapes
  uid: excel!Excel.Worksheet#shapes:member
  package: excel!
  fullName: shapes
  summary: Gibt die Sammlung aller Formobjekte auf dem Arbeitsblatt zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly shapes: ShapeCollection;'
    return:
      type: <xref uid="excel!Excel.ShapeCollection:interface" />
- name: showGridlines
  uid: excel!Excel.Worksheet#showGridlines:member
  package: excel!
  fullName: showGridlines
  summary: Gibt an, ob Gitternetzlinien für den Benutzer sichtbar sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n}\n```"
- name: showHeadings
  uid: excel!Excel.Worksheet#showHeadings:member
  package: excel!
  fullName: showHeadings
  summary: Gibt an, ob Überschriften für den Benutzer sichtbar sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type: boolean
- name: slicers
  uid: excel!Excel.Worksheet#slicers:member
  package: excel!
  fullName: slicers
  summary: Gibt eine Auflistung von datenschnitten zurück, die Teil des Arbeitsblatts sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicers: SlicerCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerCollection:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Pivot\");\n    let slicer = sheet.slicers.add(\n        \"Farm Sales\", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */\n        \"Type\" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */\n    );\n    slicer.name = \"Fruit Slicer\";\n    await context.sync();\n}\n```"
- name: standardHeight
  uid: excel!Excel.Worksheet#standardHeight:member
  package: excel!
  fullName: standardHeight
  summary: Gibt die Standardhöhe (Standard) aller Zeilen in der Arbeitsmappe in Punkt zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type: number
- name: standardWidth
  uid: excel!Excel.Worksheet#standardWidth:member
  package: excel!
  fullName: standardWidth
  summary: Gibt die Standardbreite aller Spalten im Arbeitsblatt an. Eine Einheit der Spaltenbreite entspricht der Breite eines Zeichens im Format Normal. Für proportionale Schriftarten wird die Breite des Zeichens 0 (Null) verwendet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'standardWidth: number;'
    return:
      type: number
- name: tabColor
  uid: excel!Excel.Worksheet#tabColor:member
  package: excel!
  fullName: tabColor
  summary: Die Registerkarten Farbe des Arbeitsblatts. Wenn das Arbeitsblatt unsichtbar ist, wird beim Abrufen der Registerkarten Farbe der Wert NULL. Wenn das Arbeitsblatt zwar sichtbar ist, die Registerkarten Farbe jedoch auf automatisch festgelegt ist, wird eine leere Zeichenfolge zurückgegeben. Andernfalls wird die Eigenschaft auf eine Farbe festgelegt, in der Form " \# 123456" beim Festlegen der Farbe, verwenden Sie eine leere Zeichenfolge, um eine "Auto"-Farbe oder eine reale Farbe anders festzulegen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tabColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n}\n```"
- name: tables
  uid: excel!Excel.Worksheet#tables:member
  package: excel!
  fullName: tables
  summary: Gibt die Sammlung von Tabellen zurück, die Teil des Arbeitsblatts sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:interface" />
- name: verticalPageBreaks
  uid: excel!Excel.Worksheet#verticalPageBreaks:member
  package: excel!
  fullName: verticalPageBreaks
  summary: Ruft die Sammlung der vertikalen Seitenumbrüche für das Arbeitsblatt ab. Diese Sammlung enthält nur manuelle Seitenumbrüche.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly verticalPageBreaks: PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:interface" />
- name: visibility
  uid: excel!Excel.Worksheet#visibility:member
  package: excel!
  fullName: visibility
  summary: Die Sichtbarkeit des Arbeitsblatts.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visibility: SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type: <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden" | "VeryHidden"
methods:
- name: activate()
  uid: excel!Excel.Worksheet#activate:member(1)
  package: excel!
  fullName: activate()
  summary: Aktivieren Sie das Arbeitsblatt in der Excel-Benutzeroberfläche.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: ''
- name: calculate(markAllDirty)
  uid: excel!Excel.Worksheet#calculate:member(1)
  package: excel!
  fullName: calculate(markAllDirty)
  summary: Berechnet alle Zellen auf einem Arbeitsblatt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    parameters:
    - id: markAllDirty
      description: True, um alle als verschmutzt zu markieren.
      type: boolean
    return:
      type: void
      description: ''
- name: copy(positionType, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(1)
  package: excel!
  fullName: copy(positionType, relativeTo)
  summary: Kopiert ein Arbeitsblatt und platziert es an der angegebenen Position.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      copy(
                  positionType?:
                      | WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End",
                  relativeTo?: Worksheet
              ): Worksheet;
    parameters:
    - id: positionType
      description: Der Speicherort in der Arbeitsmappe, an dem das neu erstellte Arbeitsblatt platziert werden soll. Der Standardwert ist "None", wodurch das Arbeitsblatt am Anfang des Arbeitsblatts eingefügt wird.
      type: >-
        | <xref uid="excel!Excel.WorksheetPositionType:enum" />
                        | "None"
                        | "Before"
                        | "After"
                        | "Beginning"
                        | "End"
    - id: relativeTo
      description: Das vorhandene Arbeitsblatt, das die Position des neu erstellten Arbeitsblatts bestimmt. Dies ist nur erforderlich, wenn " `positionType` before" oder "After" ist.
      type: <xref uid="excel!Excel.Worksheet:interface" />
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n}\n```"
- name: delete()
  uid: excel!Excel.Worksheet#delete:member(1)
  package: excel!
  fullName: delete()
  summary: 'Löscht das Arbeitsblatt aus der Arbeitsmappe. Beachten Sie Folgendes: Wenn die Sichtbarkeit des Arbeitsblatts auf "VeryHidden" festgelegt ist, schlägt der Löschvorgang mit einer `InvalidOperation` Ausnahme fehl. Sie sollten zunächst seine Sichtbarkeit in "ausgeblendet" oder "sichtbar" ändern, bevor Sie ihn löschen.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: findAll(text, criteria)
  uid: excel!Excel.Worksheet#findAll:member(1)
  package: excel!
  fullName: findAll(text, criteria)
  summary: Findet alle Vorkommen der angegebenen Zeichenfolge auf der Grundlage der angegebenen Kriterien und gibt sie als RangeAreas-Objekt zurück, das einen oder mehrere rechteckige Bereiche umfasst.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
    parameters:
    - id: text
      description: Die zu findende Zeichenfolge.
      type: string
    - id: criteria
      description: Zusätzliche Suchkriterien, einschließlich der Frage, ob die Suche mit der gesamten Zelle übereinstimmen muss, oder ob die Groß-/Kleinschreibung beachtet werden soll.
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: findAllOrNullObject(text, criteria)
  uid: excel!Excel.Worksheet#findAllOrNullObject:member(1)
  package: excel!
  fullName: findAllOrNullObject(text, criteria)
  summary: Findet alle Vorkommen der angegebenen Zeichenfolge auf der Grundlage der angegebenen Kriterien und gibt sie als RangeAreas-Objekt zurück, das einen oder mehrere rechteckige Bereiche umfasst.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      findAllOrNullObject(
                  text: string,
                  criteria: WorksheetSearchCriteria
              ): RangeAreas;
    parameters:
    - id: text
      description: Die zu findende Zeichenfolge.
      type: string
    - id: criteria
      description: Zusätzliche Suchkriterien, einschließlich der Frage, ob die Suche mit der gesamten Zelle übereinstimmen muss, oder ob die Groß-/Kleinschreibung beachtet werden soll.
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let foundRanges = sheet.findAllOrNullObject(\"Complete\", {\n        completeMatch: true,\n        matchCase: false\n    });\n\n    await context.sync();\n\n    if (foundRanges.isNullObject) {\n        console.log(\"No complete projects\");\n    } else {\n        foundRanges.format.fill.color = \"green\"\n    }\n}\n```"
- name: getCell(row, column)
  uid: excel!Excel.Worksheet#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält. Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie innerhalb des Arbeitsblatt Rasters bleibt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Range;'
    parameters:
    - id: row
      description: Die Zeilenanzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    - id: column
      description: Die Spaltenzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getNext(visibleOnly)
  uid: excel!Excel.Worksheet#getNext:member(1)
  package: excel!
  fullName: getNext(visibleOnly)
  summary: Ruft das Arbeitsblatt ab, das diesem folgt. Wenn keine Arbeitsblätter folgen, wird durch diese Methode ein Fehler ausgelöst.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNext(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getNextOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getNextOrNullObject:member(1)
  package: excel!
  fullName: getNextOrNullObject(visibleOnly)
  summary: Ruft das Arbeitsblatt ab, das diesem folgt. Wenn keine Arbeitsblätter folgen, wird diese Methode ein NULL-Objekt zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getPrevious(visibleOnly)
  uid: excel!Excel.Worksheet#getPrevious:member(1)
  package: excel!
  fullName: getPrevious(visibleOnly)
  summary: Ruft das Arbeitsblatt ab, das diesem vorangestellt ist. Wenn keine vorherigen Arbeitsblätter vorhanden sind, wird durch diese Methode ein Fehler ausgelöst.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getPreviousOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getPreviousOrNullObject:member(1)
  package: excel!
  fullName: getPreviousOrNullObject(visibleOnly)
  summary: Ruft das Arbeitsblatt ab, das diesem vorangestellt ist. Wenn keine vorherigen Arbeitsblätter vorhanden sind, gibt diese Methode eine NULL-Objet zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getRange(address)
  uid: excel!Excel.Worksheet#getRange:member(1)
  package: excel!
  fullName: getRange(address)
  summary: Ruft das Range-Objekt ab, das einen einzelnen rechteckigen Zellenblock darstellt, der durch die Adresse oder den Namen angegeben wird.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(address?: string): Range;'
    parameters:
    - id: address
      description: 'Optional. Die Zeichenfolge, die die Adresse oder den Namen des Bereichs darstellt. Beispielsweise "a1: B2". Wenn nichts angegeben ist, wird der gesamte Arbeitsblattbereich zurückgegeben.'
      type: string
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  uid: excel!Excel.Worksheet#getRangeByIndexes:member(1)
  package: excel!
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  summary: Ruft das Bereichsobjekt, beginnend an einem bestimmten Zeilen- und Spaltenindex, das eine bestimmte Anzahl von Zeilen und Spalten umfasst.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getRangeByIndexes(
                  startRow: number,
                  startColumn: number,
                  rowCount: number,
                  columnCount: number
              ): Range;
    parameters:
    - id: startRow
      description: Start Zeile (Null indiziert).
      type: number
    - id: startColumn
      description: Start Spalte (Null indiziert).
      type: number
    - id: rowCount
      description: Die Anzahl der Zeilen, die in den Bereich eingeschlossen werden sollen.
      type: number
    - id: columnCount
      description: Die Anzahl der Spalten, die in den Bereich eingeschlossen werden sollen.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getRanges(address)
  uid: excel!Excel.Worksheet#getRanges:member(1)
  package: excel!
  fullName: getRanges(address)
  summary: Ruft das RangeAreas-Objekt ab, das einen Block oder mehrere Blöcke rechteckiger Bereiche darstellt, die anhand von Adresse oder Name angegeben sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(address?: string): RangeAreas;'
    parameters:
    - id: address
      description: 'Optional. Eine Zeichenfolge, die die durch Trennzeichen getrennten Adressen oder Namen der einzelnen Bereiche enthält. Beispiel: "a1: B2, A5: B5". Wenn nicht angegeben, wird ein RangeArea-Objekt für das gesamte Arbeitsblatt zurückgegeben.'
      type: string
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde. Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion die obere linke Zelle zurück (d. h., es wird *kein* Fehler ausgelöst).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Optional. Bei true werden nur Zellen mit Werten als verwendete Zellen berücksichtigt (wobei die Formatierung ignoriert wird).
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde. Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion ein NULL-Objekt zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Optional. Betrachtet nur Zellen mit Werten als verwendet.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Worksheet#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Vor dem Lesen der Eigenschaften müssen Sie "`context.sync()`" aufrufen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.
      type: string | string[]
    return:
      type: void
      description: ''
- name: replaceAll(text, replacement, criteria)
  uid: excel!Excel.Worksheet#replaceAll:member(1)
  package: excel!
  fullName: replaceAll(text, replacement, criteria)
  summary: Sucht und ersetzt die angegebene Zeichenfolge auf der Grundlage der auf dem aktuellen Arbeitsblatt angegebenen Kriterien.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      replaceAll(
                  text: string,
                  replacement: string,
                  criteria: ReplaceCriteria
              ): ClientResult<number>;
    parameters:
    - id: text
      description: Zeichenfolge, die gesucht werden soll.
      type: string
    - id: replacement
      description: Zeichenfolge, durch die das Original ersetzt wird.
      type: string
    - id: criteria
      description: Zusätzliche Ersetzungskriterien.
      type: <xref uid="excel!Excel.ReplaceCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: showOutlineLevels(rowLevels, columnLevels)
  uid: excel!Excel.Worksheet#showOutlineLevels:member(1)
  package: excel!
  fullName: showOutlineLevels(rowLevels, columnLevels)
  summary: Zeigt Zeilen-oder Spaltengruppen nach Ihren Gliederungsebenen an. Enthält eine Gliederungsgruppe und fasst eine Liste der Daten im Arbeitsblatt zusammen. Die `rowLevels` `columnLevels` Parameter und geben an, wie viele Ebenen der Gliederung angezeigt werden. Der zulässige Argument Bereich liegt zwischen 0 und 8. Der Wert 0 ändert nicht die aktuelle Anzeige. Ein Wert, der größer ist als die aktuelle Anzahl von Ebenen, zeigt alle Ebenen an.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
    parameters:
    - id: rowLevels
      description: Die Anzahl der Zeilenebenen einer Gliederung, die angezeigt werden soll.
      type: number
    - id: columnLevels
      description: Die Anzahl der Spaltenebenen einer Gliederung, die angezeigt werden soll.
      type: number
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```typescript\nExcel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This collapses the entire outline.\n    sheet.showOutlineLevels(1, 1);\n    await context.sync();\n}\n```\n```typescript\nExcel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This shows the top 3 outline levels; collapsing any additional sublevels.\n    sheet.showOutlineLevels(3, 3);\n    await context.sync();\n}\n```"
metadata:
  ms.openlocfilehash: 3827291e11b2d99290067ce2143a928083276d38
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49412643"
