### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:interface'
    summary: 'Ein Excel-Arbeitsblatt ist ein Raster von Zellen. Sie kann Daten, Tabellen, Diagramme usw. enthalten. Weitere Informationen zum Arbeitsblatt-Objektmodell finden Sie [unter Arbeiten mit Arbeitsblättern mithilfe der Excel-JavaScript-API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets) .<!-- -->.'
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#comments:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
      - 'excel!Excel.Worksheet#slicers:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: Aktivieren Sie das Arbeitsblatt in der Excel-Benutzeroberfläche.
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: Stellt das AutoFilter-Objekt des Arbeitsblatts dar.
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:interface'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: Berechnet alle Zellen auf einem Arbeitsblatt.
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: 'True, um alle als verschmutzt zu markieren.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: 'Gibt eine Auflistung von Diagrammen zurück, die Teil des Arbeitsblatts sind.'
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:interface'
  - uid: 'excel!Excel.Worksheet#comments:member'
    summary: Gibt eine Sammlung aller Kommentarobjekte auf dem Arbeitsblatt zurück.
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:interface'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: Kopiert ein Arbeitsblatt und platziert es an der angegebenen Position.
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copy(
                    positionType?:
                        | WorksheetPositionType
                        | "None"
                        | "Before"
                        | "After"
                        | "Beginning"
                        | "End",
                    relativeTo?: Worksheet
                ): Worksheet;
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          }
          ```
      parameters:
        - id: positionType
          description: 'Der Speicherort in der Arbeitsmappe, an dem das neu erstellte Arbeitsblatt platziert werden soll. Der Standardwert ist "None", wodurch das Arbeitsblatt am Anfang des Arbeitsblatts eingefügt wird.'
          type:
            - 'excel!Excel.Worksheet#copy~0:complex'
        - id: relativeTo
          description: 'Das vorhandene Arbeitsblatt, das die Position des neu erstellten Arbeitsblatts bestimmt. Dies ist nur erforderlich, wenn " `positionType` before" oder "After" ist.'
          type:
            - 'excel!Excel.Worksheet:interface'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: 'Löscht das Arbeitsblatt aus der Arbeitsmappe. Beachten Sie Folgendes: Wenn die Sichtbarkeit des Arbeitsblatts auf "VeryHidden" festgelegt ist, schlägt der Löschvorgang mit einer `InvalidOperation` Ausnahme fehl. Sie sollten zunächst seine Sichtbarkeit in "ausgeblendet" oder "sichtbar" ändern, bevor Sie ihn löschen.'
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: 'Bestimmt, ob Excel das Arbeitsblatt bei Bedarf neu berechnen sollte. True, wenn Excel das Arbeitsblatt bei Bedarf neu berechnet. False, falls Excel das Arbeitsblatt nicht neu berechnet.'
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: 'Findet alle Vorkommen der angegebenen Zeichenfolge auf der Grundlage der angegebenen Kriterien und gibt sie als RangeAreas-Objekt zurück, das einen oder mehrere rechteckige Bereiche umfasst.'
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: text
          description: Die zu findende Zeichenfolge.
          type:
            - string
        - id: criteria
          description: 'Zusätzliche Suchkriterien, einschließlich der Frage, ob die Suche mit der gesamten Zelle übereinstimmen muss, oder ob die Groß-/Kleinschreibung beachtet werden soll.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: 'Findet alle Vorkommen der angegebenen Zeichenfolge auf der Grundlage der angegebenen Kriterien und gibt sie als RangeAreas-Objekt zurück, das einen oder mehrere rechteckige Bereiche umfasst.'
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        findAllOrNullObject(
                    text: string,
                    criteria: WorksheetSearchCriteria
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          }
          ```
      parameters:
        - id: text
          description: Die zu findende Zeichenfolge.
          type:
            - string
        - id: criteria
          description: 'Zusätzliche Suchkriterien, einschließlich der Frage, ob die Suche mit der gesamten Zelle übereinstimmen muss, oder ob die Groß-/Kleinschreibung beachtet werden soll.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: 'Ruft ein Objekt ab, das zum Bearbeiten von fixierten Bereichen auf dem Arbeitsblatt verwendet werden kann.'
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:interface'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: 'Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält. Die Zelle kann außerhalb der Grenzen des übergeordneten Bereichs liegen, solange Sie innerhalb des Arbeitsblatt Rasters bleibt.'
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Die Zeilenanzahl der abzurufenden Zelle. Nullindiziert.
          type:
            - number
        - id: column
          description: Die Spaltenzahl der abzurufenden Zelle. Nullindiziert.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: 'Ruft das Arbeitsblatt ab, das diesem folgt. Wenn keine Arbeitsblätter folgen, wird durch diese Methode ein Fehler ausgelöst.'
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: 'Ruft das Arbeitsblatt ab, das diesem folgt. Wenn keine Arbeitsblätter folgen, wird diese Methode ein NULL-Objekt zurückgegeben.'
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: 'Ruft das Arbeitsblatt ab, das diesem vorangestellt ist. Wenn keine vorherigen Arbeitsblätter vorhanden sind, wird durch diese Methode ein Fehler ausgelöst.'
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: 'Ruft das Arbeitsblatt ab, das diesem vorangestellt ist. Wenn keine vorherigen Arbeitsblätter vorhanden sind, gibt diese Methode eine NULL-Objet zurück.'
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Optional. Bei true werden nur sichtbare Arbeitsblätter berücksichtigt, und alle ausgeblendeten werden übersprungen.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: 'Ruft das Range-Objekt ab, das einen einzelnen rechteckigen Zellenblock darstellt, der durch die Adresse oder den Namen angegeben wird.'
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: address
          description: 'Optional. Die Zeichenfolge, die die Adresse oder den Namen des Bereichs darstellt. Beispielsweise "a1: B2". Wenn nichts angegeben ist, wird der gesamte Arbeitsblattbereich zurückgegeben.'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: 'Ruft das Bereichsobjekt, beginnend an einem bestimmten Zeilen- und Spaltenindex, das eine bestimmte Anzahl von Zeilen und Spalten umfasst.'
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getRangeByIndexes(
                    startRow: number,
                    startColumn: number,
                    rowCount: number,
                    columnCount: number
                ): Range;
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: startRow
          description: Start Zeile (Null indiziert).
          type:
            - number
        - id: startColumn
          description: Start Spalte (Null indiziert).
          type:
            - number
        - id: rowCount
          description: 'Die Anzahl der Zeilen, die in den Bereich eingeschlossen werden sollen.'
          type:
            - number
        - id: columnCount
          description: 'Die Anzahl der Spalten, die in den Bereich eingeschlossen werden sollen.'
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: 'Ruft das RangeAreas-Objekt ab, das einen Block oder mehrere Blöcke rechteckiger Bereiche darstellt, die anhand von Adresse oder Name angegeben sind.'
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {

              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: 'Optional. Eine Zeichenfolge, die die durch Trennzeichen getrennten Adressen oder Namen der einzelnen Bereiche enthält. Beispiel: "a1: B2, A5: B5". Wenn nicht angegeben, wird ein RangeArea-Objekt für das gesamte Arbeitsblatt zurückgegeben.'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: 'Der verwendete Bereich ist der kleinste Bereich, der mindestens eine der Zellen umfasst, die einen Wert enthalten oder denen eine Formatierung zugewiesen wurde. Wenn das gesamte Arbeitsblatt leer ist, gibt diese Funktion die obere linke Zelle zurück (d. h., es wird *kein* Fehler ausgelöst).'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Optional. Bei true werden nur Zellen mit Werten als verwendete Zellen berücksichtigt (wobei die Formatierung ignoriert wird).
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: 'The used range is the smallest range that encompasses any cells that have a value or formatting assigned to them. If the entire worksheet is blank, this function will return a null object.'
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Optional. Betrachtet nur Zellen mit Werten als verwendet.
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: Ruft die Sammlung der horizontalen Seitenumbrüche für das Arbeitsblatt ab. Diese Sammlung enthält nur manuelle Seitenumbrüche.
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:interface'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: 'Gibt einen Wert zurück, der das Arbeitsblatt in einer bestimmten Arbeitsmappe eindeutig identifiziert. Der Wert des Bezeichners bleibt unverändert, auch wenn das Arbeitsblatt umbenannt oder verschoben wird.'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen `context.sync()` vor dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: Der Anzeigename des Arbeitsblatts.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: Auflistung von Namen im Bereich des aktuellen Arbeitsblatts.
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:interface'
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: Ruft das PageLayout-Objekt des Arbeitsblatts ab.
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:interface'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: 'Die Sammlung von PivotTables, die Teil des Arbeitsblatts sind.'
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:interface'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: Die nullbasiert Position des Arbeitsblatts in der Arbeitsmappe.
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: Gibt das Arbeitsblattschutz-Objekt für ein Arbeitsblatt zurück.
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:interface'
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: Sucht und ersetzt die angegebene Zeichenfolge auf der Grundlage der auf dem aktuellen Arbeitsblatt angegebenen Kriterien.
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: ''
      parameters:
        - id: text
          description: 'Zeichenfolge, die gesucht werden soll.'
          type:
            - string
        - id: replacement
          description: 'Zeichenfolge, durch die das Original ersetzt wird.'
          type:
            - string
        - id: criteria
          description: Zusätzliche Ersetzungskriterien.
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: Gibt die Sammlung aller Formobjekte auf dem Arbeitsblatt zurück.
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:interface'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: 'Gibt an, ob Gitternetzlinien für den Benutzer sichtbar sind.'
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: 'Gibt an, ob Überschriften für den Benutzer sichtbar sind.'
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    summary: 'Zeigt Zeilen-oder Spaltengruppen nach Ihren Gliederungsebenen an. Enthält eine Gliederungsgruppe und fasst eine Liste der Daten im Arbeitsblatt zusammen. Die `rowLevels` `columnLevels` Parameter und geben an, wie viele Ebenen der Gliederung angezeigt werden. Der zulässige Argument Bereich liegt zwischen 0 und 8. Der Wert 0 ändert nicht die aktuelle Anzeige. Ein Wert, der größer ist als die aktuelle Anzahl von Ebenen, zeigt alle Ebenen an.'
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This collapses the entire outline.
              sheet.showOutlineLevels(1, 1);
              await context.sync();
          }
          ```
          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This shows the top 3 outline levels; collapsing any additional sublevels.
              sheet.showOutlineLevels(3, 3);
              await context.sync();
          }
          ```
      parameters:
        - id: rowLevels
          description: 'Die Anzahl der Zeilenebenen einer Gliederung, die angezeigt werden soll.'
          type:
            - number
        - id: columnLevels
          description: 'Die Anzahl der Spaltenebenen einer Gliederung, die angezeigt werden soll.'
          type:
            - number
  - uid: 'excel!Excel.Worksheet#slicers:member'
    summary: 'Gibt eine Auflistung von datenschnitten zurück, die Teil des Arbeitsblatts sind.'
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:interface'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Pivot");
              let slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: Gibt die Standardhöhe (Standard) aller Zeilen in der Arbeitsmappe in Punkt zurück.
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: "Gibt die Standardbreite aller Spalten im Arbeitsblatt an. Eine Einheit der Spaltenbreite entspricht der Breite eines Zeichens im Format Normal. Für proportionale Schriftarten wird die Breite des Zeichens\_0 (Null) verwendet."
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: 'Die Registerkarten Farbe des Arbeitsblatts. Wenn das Arbeitsblatt unsichtbar ist, wird beim Abrufen der Registerkarten Farbe der Wert NULL. Wenn das Arbeitsblatt zwar sichtbar ist, die Registerkarten Farbe jedoch auf automatisch festgelegt ist, wird eine leere Zeichenfolge zurückgegeben. Andernfalls wird die Eigenschaft auf eine Farbe festgelegt, in der Form " \# 123456" beim Festlegen der Farbe, verwenden Sie eine leere Zeichenfolge, um eine "Auto"-Farbe oder eine reale Farbe anders festzulegen.'
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: 'Gibt die Sammlung von Tabellen zurück, die Teil des Arbeitsblatts sind.'
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:interface'
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: Ruft die Sammlung der vertikalen Seitenumbrüche für das Arbeitsblatt ab. Diese Sammlung enthält nur manuelle Seitenumbrüche.
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:interface'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: Die Sichtbarkeit des Arbeitsblatts.
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!Excel.AutoFilter:interface'
    name: AutoFilter
    fullName: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:interface'
    name: ChartCollection
    fullName: Excel.ChartCollection
  - uid: 'excel!Excel.CommentCollection:interface'
    name: CommentCollection
    fullName: Excel.CommentCollection
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet
  - uid: 'excel!Excel.Worksheet#copy~0:complex'
    name: |-
      | WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End"
    fullName: |-
      | Excel.WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.WorksheetPositionType:enum'
        name: WorksheetPositionType
        fullName: Excel.WorksheetPositionType
      - name: |2-

                          | "None"
                          | "Before"
                          | "After"
                          | "Beginning"
                          | "End"
        fullName: |2-

                          | "None"
                          | "Before"
                          | "After"
                          | "Beginning"
                          | "End"
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: WorksheetSearchCriteria
    fullName: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:interface'
    name: WorksheetFreezePanes
    fullName: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:interface'
    name: PageBreakCollection
    fullName: Excel.PageBreakCollection
  - uid: 'excel!Excel.NamedItemCollection:interface'
    name: NamedItemCollection
    fullName: Excel.NamedItemCollection
  - uid: 'excel!Excel.PageLayout:interface'
    name: PageLayout
    fullName: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:interface'
    name: PivotTableCollection
    fullName: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:interface'
    name: WorksheetProtection
    fullName: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: Excel.ReplaceCriteria
  - uid: 'excel!Excel.ShapeCollection:interface'
    name: ShapeCollection
    fullName: Excel.ShapeCollection
  - uid: 'excel!Excel.SlicerCollection:interface'
    name: SlicerCollection
    fullName: Excel.SlicerCollection
  - uid: 'excel!Excel.TableCollection:interface'
    name: TableCollection
    fullName: Excel.TableCollection
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'