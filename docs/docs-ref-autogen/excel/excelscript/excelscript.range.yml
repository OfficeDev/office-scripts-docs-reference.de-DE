### YamlMime:TSType
name: ExcelScript.Range
uid: ExcelScript!ExcelScript.Range:interface
package: ExcelScript!
fullName: ExcelScript.Range
summary: Ein Bereich stellt einen Satz einer oder mehrerer zusammenhängender Zellen wie z. B. eine Zelle, eine Zeile oder eine Spalte, ein Block von Zellen usw. dar.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addConditionalFormat(type)
  uid: ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)
  package: ExcelScript!
  fullName: addConditionalFormat(type)
  summary: Fügt der Auflistung ein neues bedingtes Format mit der ersten/obersten Priorität hinzu.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
    parameters:
    - id: type
      description: Der Typ des bedingten Formats, das hinzugefügt wird. Weitere `ExcelScript.ConditionalFormatType` Informationen finden Sie unter.
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample applies conditional formatting to the currently used range in the worksheet. \n * The conditional formatting is a green fill for the top 10% of values.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the used range in the worksheet.\n  let range = selectedSheet.getUsedRange();\n\n  // Set the fill color to green for the top 10% of values in the range.\n  let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)\n  conditionalFormat.getTopBottom().getFormat().getFill().setColor(\"green\");\n  conditionalFormat.getTopBottom().setRule({\n    rank: 10, // The percentage threshold.\n    type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.\n  });\n}\n```"
- name: autoFill(destinationRange, autoFillType)
  uid: ExcelScript!ExcelScript.Range#autoFill:member(1)
  package: ExcelScript!
  fullName: autoFill(destinationRange, autoFillType)
  summary: Füllt den Bereich vom aktuellen Bereich bis zum Zielbereich mithilfe der angegebenen AutoFill-Logik. Der Zielbereich kann `null`<!-- -->oder kann die Quelle horizontal oder vertikal erweitern. Nicht zusammenhängende Bereiche werden nicht unterstützt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      autoFill(
                  destinationRange?: Range | string,
                  autoFillType?: AutoFillType
              ): void;
    parameters:
    - id: destinationRange
      description: Der Zielbereich zu AutoFill. Wenn der Zielbereich `null`<!-- -->werden Daten basierend auf den umgebenden Zellen ausgefüllt (das ist das Verhalten beim Doppelklicken auf den Bereichsfüllhandle der Benutzeroberfläche).
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: autoFillType
      description: Der Typ von AutoFill. Gibt an, wie der Zielbereich gefüllt werden soll, basierend auf dem Inhalt des aktuellen Bereichs. Der Standardwert ist "FillDefault".
      type: <xref uid="ExcelScript!ExcelScript.AutoFillType:enum" />
    return:
      type: void
      description: ''
- name: calculate()
  uid: ExcelScript!ExcelScript.Range#calculate:member(1)
  package: ExcelScript!
  fullName: calculate()
  summary: Berechnet einen Zellbereich auf einem Arbeitsblatt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(): void;'
    return:
      type: void
      description: ''
- name: clear(applyTo)
  uid: ExcelScript!ExcelScript.Range#clear:member(1)
  package: ExcelScript!
  fullName: clear(applyTo)
  summary: Löscht Bereichswerte, Format, Füllung, Rahmen usw.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: Optional. Bestimmt den Typ der Löschaktion. Weitere `ExcelScript.ClearApplyTo` Informationen finden Sie unter.
      type: <xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This script removes all the formatting from the selected range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected range.\n  let range = workbook.getSelectedRange();\n\n  // Clear all the formatting in that range.\n  range.clear(ExcelScript.ClearApplyTo.formats);\n}\n```"
- name: clearAllConditionalFormats()
  uid: ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)
  package: ExcelScript!
  fullName: clearAllConditionalFormats()
  summary: Löscht alle bedingten Formate, die im aktuellen angegebenen Bereich aktiv sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearAllConditionalFormats(): void;'
    return:
      type: void
      description: ''
- name: convertDataTypeToText()
  uid: ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)
  package: ExcelScript!
  fullName: convertDataTypeToText()
  summary: Konvertiert die Bereichszellen mit Datentypen in Text.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type: void
      description: ''
- name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  uid: ExcelScript!ExcelScript.Range#copyFrom:member(1)
  package: ExcelScript!
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  summary: Kopiert Zelldaten oder Formatierungen aus dem Quellbereich oder `RangeAreas` in den aktuellen Bereich. Der Zielbereich kann eine andere Größe als der Quellbereich oder `RangeAreas`<!-- -->. Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      copyFrom(
                  sourceRange: Range | RangeAreas | string,
                  copyType?: RangeCopyType,
                  skipBlanks?: boolean,
                  transpose?: boolean
              ): void;
    parameters:
    - id: sourceRange
      description: Der Quellbereich oder `RangeAreas` aus dem kopiert werden soll. Wenn die Quelle über mehrere Bereiche verfügt, muss ihr Formular erstellt werden können, indem vollständige Zeilen oder Spalten aus `RangeAreas` einem rechteckigen Bereich entfernt werden.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
    - id: copyType
      description: Der Typ der zu kopierende Zellendaten oder Formatierung. Der Standardwert ist "All".
      type: <xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />
    - id: skipBlanks
      description: True, wenn leere Zellen im Quellbereich übersprungen werden. Der Standardwert ist „false“.
      type: boolean
    - id: transpose
      description: True, wenn die Zellen im Zielbereich transponiert werden. Der Standardwert ist „false“.
      type: boolean
    return:
      type: void
      description: ''
- name: delete(shift)
  uid: ExcelScript!ExcelScript.Range#delete:member(1)
  package: ExcelScript!
  fullName: delete(shift)
  summary: Löscht die dem Bereich zugeordneten Zellen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shift: DeleteShiftDirection): void;'
    parameters:
    - id: shift
      description: Gibt an, wohin die Zellen verschoben werden. Weitere `ExcelScript.DeleteShiftDirection` Informationen finden Sie unter.
      type: <xref uid="ExcelScript!ExcelScript.DeleteShiftDirection:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample creates a sample range, then deletes\n * \"A1\" using different DeleteShiftDirection values.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Add sample data to better visualize the delete changes.\n  const currentSheet = workbook.getActiveWorksheet();\n  currentSheet.getRange(\"A1:D4\").setValues([\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16]]);\n\n  // Delete A1 and shift the cells from the right to fill the space.\n  // The value being deleted is 1.\n  currentSheet.getRange(\"A1\").delete(ExcelScript.DeleteShiftDirection.left);\n\n  // Delete A1 and shift the cells from the bottom to fill the space.\n  // The value being deleted is 2.\n  currentSheet.getRange(\"A1\").delete(ExcelScript.DeleteShiftDirection.up);\n\n  // Log the sample range. The values should be:\n  /*\n    5, 3, 4, \"\",\n    9, 6, 7, 8,\n    13, 10, 11, 12,\n    \"\", 14, 15, 16\n  */\n  console.log(currentSheet.getRange(\"A1:D4\").getValues()); \n}\n```"
- name: find(text, criteria)
  uid: ExcelScript!ExcelScript.Range#find:member(1)
  package: ExcelScript!
  fullName: find(text, criteria)
  summary: Sucht die angegebene Zeichenfolge anhand der angegebenen Kriterien. Wenn der aktuelle Bereich größer als eine einzelne Zelle ist, wird die Suche auf diesen Bereich beschränkt, da die Suche das gesamte Blatt ab dieser Zelle umfasst. Wenn keine Übereinstimmungen angezeigt werden, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf festgelegt ist. `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'find(text: string, criteria: SearchCriteria): Range;'
    parameters:
    - id: text
      description: Die zu suchende Zeichenfolge.
      type: string
    - id: criteria
      description: Zusätzliche Suchkriterien, einschließlich der Suchrichtung und der Frage, ob die Suche mit der gesamten Zelle übereinstimmen muss oder ob die Kleinschreibung beachtet werden muss.
      type: <xref uid="ExcelScript!ExcelScript.SearchCriteria:interface" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: flashFill()
  uid: ExcelScript!ExcelScript.Range#flashFill:member(1)
  package: ExcelScript!
  fullName: flashFill()
  summary: Führt eine Blitzfüllung für den aktuellen Bereich aus. Flash Fill füllt Daten automatisch, wenn ein Muster erkannt wird. Daher muss der Bereich ein einzelner Spaltenbereich sein und Daten um ihn herum haben, um ein Muster zu finden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'flashFill(): void;'
    return:
      type: void
      description: ''
- name: getAbsoluteResizedRange(numRows, numColumns)
  uid: ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)
  package: ExcelScript!
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  summary: Ruft ein Objekt mit derselben linken oberen Zelle wie das aktuelle Objekt ab, jedoch mit der angegebenen Anzahl von `Range` `Range` Zeilen und Spalten.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
    parameters:
    - id: numRows
      description: Die Anzahl der Zeilen der neuen Bereichsgröße.
      type: number
    - id: numColumns
      description: Die Anzahl der Spalten der neuen Bereichsgröße.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getAddress()
  uid: ExcelScript!ExcelScript.Range#getAddress:member(1)
  package: ExcelScript!
  fullName: getAddress()
  summary: Gibt den Bereichsverweis im A1-Format an. Der Adresswert enthält den Blattverweis (z. B. "Sheet1! A1:B4").
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddress(): string;'
    return:
      type: string
      description: ''
- name: getAddressLocal()
  uid: ExcelScript!ExcelScript.Range#getAddressLocal:member(1)
  package: ExcelScript!
  fullName: getAddressLocal()
  summary: Stellt den Bereichsverweis für den angegebenen Bereich in der Sprache des Benutzers dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddressLocal(): string;'
    return:
      type: string
      description: ''
- name: getBoundingRect(anotherRange)
  uid: ExcelScript!ExcelScript.Range#getBoundingRect:member(1)
  package: ExcelScript!
  fullName: getBoundingRect(anotherRange)
  summary: Ruft das kleinste Bereichsobjekt ab, das die angegebenen Bereiche umfasst. Beispielsweise ist `GetBoundingRect` "B2:C5" und "D10:E15" "B2:E15".
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Range;'
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt, die Adresse oder der Bereichsname.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getCell(row, column)
  uid: ExcelScript!ExcelScript.Range#getCell:member(1)
  package: ExcelScript!
  fullName: getCell(row, column)
  summary: Ruft das Bereichsobjekt ab, das die einzelne Zelle basierend auf Zeilen- und Spaltenanzahl enthält. Die Zelle kann sich außerhalb der Grenzen ihres übergeordneten Bereichs befinden, solange sie innerhalb des Arbeitsblattrasters bleibt. Die zurückgegebene Zelle befindet sich relativ zur obersten linken Zelle des Bereichs.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Range;'
    parameters:
    - id: row
      description: Zeilenanzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    - id: column
      description: Spaltenanzahl der abzurufenden Zelle. Nullindiziert.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getCellCount()
  uid: ExcelScript!ExcelScript.Range#getCellCount:member(1)
  package: ExcelScript!
  fullName: getCellCount()
  summary: Gibt die Anzahl der Zellen im Bereich an. Diese API gibt -1 zurück, wenn die Zellenanzahl 2^31-1 (2.147.483.647) überschreitet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellCount(): number;'
    return:
      type: number
      description: ''
- name: getColumn(column)
  uid: ExcelScript!ExcelScript.Range#getColumn:member(1)
  package: ExcelScript!
  fullName: getColumn(column)
  summary: Ruft eine Spalte ab, die im Bereich enthalten ist.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumn(column: number): Range;'
    parameters:
    - id: column
      description: Spaltenanzahl des abzurufenden Bereichs. Nullindiziert.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getColumnCount()
  uid: ExcelScript!ExcelScript.Range#getColumnCount:member(1)
  package: ExcelScript!
  fullName: getColumnCount()
  summary: Gibt die Gesamtanzahl der Spalten im Bereich an.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnCount(): number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample provides the count of negative numbers that are present\n * in the used range of the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the working range.\n  let usedRange = workbook.getActiveWorksheet().getUsedRange();\n  let rowCount = usedRange.getRowCount();\n  let columnCount = usedRange.getColumnCount();\n\n  // Save the values locally to avoid repeatedly asking the workbook.\n  let usedRangeValues = usedRange.getValues();\n\n  // Start the negative number counter.\n  let negativeCount = 0;\n\n  // Iterate over the entire range looking for negative numbers.\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < columnCount; j++) {\n      if (usedRangeValues[i][j] < 0) {\n        negativeCount++;\n      }\n    }\n  }\n\n  // Log the negative number count to the console.\n  console.log(negativeCount);\n}\n```"
- name: getColumnHidden()
  uid: ExcelScript!ExcelScript.Range#getColumnHidden:member(1)
  package: ExcelScript!
  fullName: getColumnHidden()
  summary: Stellt dar, ob alle Spalten im aktuellen Bereich ausgeblendet sind. Der Wert `true` ist, wenn alle Spalten in einem Bereich ausgeblendet sind. Der Wert `false` ist, wenn keine Spalten im Bereich ausgeblendet sind. Der Wert ist, wenn einige Spalten in einem Bereich ausgeblendet sind und andere `null` Spalten im gleichen Bereich nicht ausgeblendet werden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getColumnIndex()
  uid: ExcelScript!ExcelScript.Range#getColumnIndex:member(1)
  package: ExcelScript!
  fullName: getColumnIndex()
  summary: Gibt die Spaltennummer der ersten Zelle im Bereich an. Nullindiziert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnIndex(): number;'
    return:
      type: number
      description: ''
- name: getColumnsAfter(count)
  uid: ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)
  package: ExcelScript!
  fullName: getColumnsAfter(count)
  summary: Ruft eine bestimmte Anzahl von Spalten rechts neben dem aktuellen Objekt `Range` ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsAfter(count?: number): Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getColumnsBefore(count)
  uid: ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)
  package: ExcelScript!
  fullName: getColumnsBefore(count)
  summary: Ruft eine bestimmte Anzahl von Spalten links vom aktuellen Objekt `Range` ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsBefore(count?: number): Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Spalten, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getConditionalFormat(id)
  uid: ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)
  package: ExcelScript!
  fullName: getConditionalFormat(id)
  summary: Gibt ein bedingtes Format für die angegebene ID zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormat(id: string): ConditionalFormat;'
    parameters:
    - id: id
      description: Die ID des bedingten Formats.
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: ''
- name: getConditionalFormats()
  uid: ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)
  package: ExcelScript!
  fullName: getConditionalFormats()
  summary: Die Auflistung davon `ConditionalFormats` überschneidet den Bereich.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormats(): ConditionalFormat[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]
      description: ''
- name: getDataValidation()
  uid: ExcelScript!ExcelScript.Range#getDataValidation:member(1)
  package: ExcelScript!
  fullName: getDataValidation()
  summary: Gibt ein Datenüberprüfungsobjekt zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataValidation(): DataValidation;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidation:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This script creates a drop-down selection list for a cell. It uses the existing values of the selected range as the choices for the list.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the values for data validation.\n  let selectedRange = workbook.getSelectedRange();\n  let rangeValues = selectedRange.getValues();\n\n  // Convert the values into a comma-delimited string.\n  let dataValidationListString = \"\";\n  rangeValues.forEach((rangeValueRow) => {\n    rangeValueRow.forEach((value) => {\n      dataValidationListString += value + \",\";\n    });\n  });\n\n  // Clear the old range.\n  selectedRange.clear(ExcelScript.ClearApplyTo.contents);\n\n  // Apply the data validation to the first cell in the selected range.\n  let targetCell = selectedRange.getCell(0,0);\n  let dataValidation = targetCell.getDataValidation();\n\n  // Set the content of the drop-down list.\n  dataValidation.setRule({\n      list: {\n        inCellDropDown: true,\n        source: dataValidationListString\n      }\n    });\n}\n```"
- name: getDirectPrecedents()
  uid: ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)
  package: ExcelScript!
  fullName: getDirectPrecedents()
  summary: Gibt ein Objekt zurück, das den Bereich darstellt, der alle direkten Vorgänger einer Zelle im gleichen Arbeitsblatt oder `WorkbookRangeAreas` in mehreren Arbeitsblättern enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDirectPrecedents(): WorkbookRangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookRangeAreas:interface" />
      description: ''
- name: getEntireColumn()
  uid: ExcelScript!ExcelScript.Range#getEntireColumn:member(1)
  package: ExcelScript!
  fullName: getEntireColumn()
  summary: Ruft ein Objekt ab, das die gesamte Spalte des Bereichs darstellt (wenn der aktuelle Bereich z. B. die Zellen "B4:E11" darstellt, handelt es sich um einen Bereich, der spalten `getEntireColumn` "B:E") darstellt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getEntireRow()
  uid: ExcelScript!ExcelScript.Range#getEntireRow:member(1)
  package: ExcelScript!
  fullName: getEntireRow()
  summary: Ruft ein Objekt ab, das die gesamte Zeile des Bereichs darstellt (wenn der aktuelle Bereich z. B. die Zellen "B4:E11" darstellt, handelt es sich um einen Bereich, der die Zeilen `GetEntireRow` "4:11" darstellt).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getExtendedRange(direction, activeCell)
  uid: ExcelScript!ExcelScript.Range#getExtendedRange:member(1)
  package: ExcelScript!
  fullName: getExtendedRange(direction, activeCell)
  summary: Gibt ein Range-Objekt zurück, das den aktuellen Bereich und bis zum Rand des Bereichs enthält, basierend auf der angegebenen Richtung. Dies entspricht dem Strg+Umschalt+Pfeiltastenverhalten in der Excel unter Windows-Benutzeroberfläche.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getExtendedRange(
                  direction: KeyboardDirection,
                  activeCell?: Range | string
              ): Range;
    parameters:
    - id: direction
      description: Die Richtung von der aktiven Zelle.
      type: <xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />
    - id: activeCell
      description: Die aktive Zelle in diesem Bereich. Standardmäßig ist die aktive Zelle die obere linke Zelle des Bereichs. Wenn sich die aktive Zelle nicht in diesem Bereich befindet, wird ein Fehler ausgelöst.
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getFormat()
  uid: ExcelScript!ExcelScript.Range#getFormat:member(1)
  package: ExcelScript!
  fullName: getFormat()
  summary: Gibt ein Formatobjekt zurück, das die Schriftart des Bereichs, Füllung, den Rahmen, die Ausrichtung und andere Eigenschaften verschachtelt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormat(): RangeFormat;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />
      description: ''
- name: getFormula()
  uid: ExcelScript!ExcelScript.Range#getFormula:member(1)
  package: ExcelScript!
  fullName: getFormula()
  summary: Represents the cell formula in A1-style notation. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormula(): string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/*\n * This script sets a cell's formula, \n * then displays how Excel stores the cell's formula and value separately.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Set A1 to 2.\n  let a1 = selectedSheet.getRange(\"A1\");\n  a1.setValue(2);\n\n  // Set B1 to the formula =(2*A1), which should equal 4.\n  let b1 = selectedSheet.getRange(\"B1\")\n  b1.setFormula(\"=(2*A1)\");\n\n  // Log the current results for `getFormula` and `getValue` at B1.\n  console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);\n}\n```"
- name: getFormulaLocal()
  uid: ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)
  package: ExcelScript!
  fullName: getFormulaLocal()
  summary: Represents the cell formula in A1-style notation, in the user's language and number-formatting locale. Beispielsweise würde die englische Formel „= SUM(A1, 1.5)“ in Deutsch „= SUMME(A1; 1,5)“ werden. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulaLocal(): string;'
    return:
      type: string
      description: ''
- name: getFormulaR1C1()
  uid: ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)
  package: ExcelScript!
  fullName: getFormulaR1C1()
  summary: Represents the cell formula in R1C1-style notation. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulaR1C1(): string;'
    return:
      type: string
      description: ''
- name: getFormulas()
  uid: ExcelScript!ExcelScript.Range#getFormulas:member(1)
  package: ExcelScript!
  fullName: getFormulas()
  summary: Stellt die Formel in der A1-Schreibweise dar. Wenn eine Zelle keine Formel hat, wird stattdessen ihr Wert zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulas(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getFormulasLocal()
  uid: ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)
  package: ExcelScript!
  fullName: getFormulasLocal()
  summary: Stellt die Formel in der A1-Schreibweise, Sprache des Benutzers und im Gebietsschema der Zahlenformatierung dar. Beispielsweise würde die englische Formel „= SUM(A1, 1.5)“ in Deutsch „= SUMME(A1; 1,5)“ werden. Wenn eine Zelle keine Formel hat, wird stattdessen ihr Wert zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulasLocal(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getFormulasR1C1()
  uid: ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)
  package: ExcelScript!
  fullName: getFormulasR1C1()
  summary: Stellt die Formel in der R1C1-Schreibweise dar. Wenn eine Zelle keine Formel hat, wird stattdessen ihr Wert zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulasR1C1(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getHasSpill()
  uid: ExcelScript!ExcelScript.Range#getHasSpill:member(1)
  package: ExcelScript!
  fullName: getHasSpill()
  summary: Stellt dar, ob alle Zellen einen Überlaufrahmen aufweisen. Gibt zurück, ob alle Zellen über einen Überlaufrand verfügen oder wenn alle Zellen `true` keinen Überlaufrand `false` haben. Gibt `null` zurück, wenn Zellen mit und ohne Überlaufgrenzen innerhalb des Bereichs enthalten sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHasSpill(): boolean;'
    return:
      type: boolean
      description: ''
- name: getHeight()
  uid: ExcelScript!ExcelScript.Range#getHeight:member(1)
  package: ExcelScript!
  fullName: getHeight()
  summary: Gibt den Abstand in Punkt für 100 % Zoom vom oberen Rand des Bereichs zum unteren Rand des Bereichs zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHeight(): number;'
    return:
      type: number
      description: ''
- name: getHidden()
  uid: ExcelScript!ExcelScript.Range#getHidden:member(1)
  package: ExcelScript!
  fullName: getHidden()
  summary: Stellt dar, ob alle Zellen im aktuellen Bereich ausgeblendet sind. Der Wert `true` ist, wenn alle Zellen in einem Bereich ausgeblendet sind. Der Wert `false` ist, wenn keine Zellen im Bereich ausgeblendet sind. Der Wert ist, wenn einige Zellen in einem Bereich ausgeblendet sind und andere Zellen im gleichen `null` Bereich nicht ausgeblendet werden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getHyperlink()
  uid: ExcelScript!ExcelScript.Range#getHyperlink:member(1)
  package: ExcelScript!
  fullName: getHyperlink()
  summary: Stellt den Hyperlink für den aktuellen Bereich dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHyperlink(): RangeHyperlink;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />
      description: ''
- name: getImage()
  uid: ExcelScript!ExcelScript.Range#getImage:member(1)
  package: ExcelScript!
  fullName: getImage()
  summary: Rendert den Bereich als base64-codiertes Png-Bild.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(): string;'
    return:
      type: string
      description: ''
- name: getIntersection(anotherRange)
  uid: ExcelScript!ExcelScript.Range#getIntersection:member(1)
  package: ExcelScript!
  fullName: getIntersection(anotherRange)
  summary: Ruft das Bereichsobjekt ab, das die rechteckige Schnittmenge der angegebenen Bereiche darstellt. Wenn keine Schnittmenge gefunden wird, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf festgelegt ist. `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Range;'
    parameters:
    - id: anotherRange
      description: Das Bereichsobjekt oder die Bereichsadresse, die verwendet wird, um die Schnittmenge der Bereiche zu ermitteln.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getIsEntireColumn()
  uid: ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)
  package: ExcelScript!
  fullName: getIsEntireColumn()
  summary: Gibt an, ob der angegebene Bereich eine ganze Spalte ist.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireColumn(): boolean;'
    return:
      type: boolean
      description: ''
- name: getIsEntireRow()
  uid: ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)
  package: ExcelScript!
  fullName: getIsEntireRow()
  summary: Gibt an, ob der angegebene Bereich eine ganze Zeile ist.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireRow(): boolean;'
    return:
      type: boolean
      description: ''
- name: getLastCell()
  uid: ExcelScript!ExcelScript.Range#getLastCell:member(1)
  package: ExcelScript!
  fullName: getLastCell()
  summary: 'Ruft die letzte Zelle im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs „B2: D5“ „D5“.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastCell(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLastColumn()
  uid: ExcelScript!ExcelScript.Range#getLastColumn:member(1)
  package: ExcelScript!
  fullName: getLastColumn()
  summary: Ruft die letzte Spalte im Bereich ab. Beispielsweise lautet die letzte Spalte von „B2:D5“ „D2:D5“.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastColumn(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLastRow()
  uid: ExcelScript!ExcelScript.Range#getLastRow:member(1)
  package: ExcelScript!
  fullName: getLastRow()
  summary: 'Ruft die letzte Zeile im Bereich ab. Beispielsweise lautet die letzte Zelle des Bereichs "B2: D5" "B5:D5".'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastRow(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLeft()
  uid: ExcelScript!ExcelScript.Range#getLeft:member(1)
  package: ExcelScript!
  fullName: getLeft()
  summary: Gibt den Abstand in Punkt für 100 % Zoom vom linken Rand des Arbeitsblatts zum linken Rand des Bereichs zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLeft(): number;'
    return:
      type: number
      description: ''
- name: getLinkedDataTypeState()
  uid: ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)
  package: ExcelScript!
  fullName: getLinkedDataTypeState()
  summary: Stellt den Datentypstatus der Zelle dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />
      description: ''
- name: getLinkedDataTypeStates()
  uid: ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)
  package: ExcelScript!
  fullName: getLinkedDataTypeStates()
  summary: Stellt den Datentypstatus der einzelnen Zellen dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />[][]
      description: ''
- name: getNumberFormat()
  uid: ExcelScript!ExcelScript.Range#getNumberFormat:member(1)
  package: ExcelScript!
  fullName: getNumberFormat()
  summary: Represents cell Excel number format code for the given range. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormat(): string;'
    return:
      type: string
      description: ''
- name: getNumberFormatCategories()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)
  package: ExcelScript!
  fullName: getNumberFormatCategories()
  summary: Stellt die Kategorie des Zahlenformats jeder Zelle dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />[][]
      description: ''
- name: getNumberFormatCategory()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatCategory:member(1)
  package: ExcelScript!
  fullName: getNumberFormatCategory()
  summary: Gibt die Zahlenformatkategorie der ersten Zelle im Bereich an (dargestellt durch zeilenindex von 0 und Spaltenindex von 0).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatCategory(): NumberFormatCategory;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />
      description: ''
- name: getNumberFormatLocal()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)
  package: ExcelScript!
  fullName: getNumberFormatLocal()
  summary: Represents cell Excel number format code for the given range, based on the language settings of the user. Excel führt beim Abrufen oder Festlegen der Eigenschaft keine Sprach- oder Formatkoerzieren `numberFormatLocal` aus. Jeder zurückgegebene Text verwendet die lokal formatierten Zeichenfolgen basierend auf der in den Systemeinstellungen angegebenen Sprache. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatLocal(): string;'
    return:
      type: string
      description: ''
- name: getNumberFormats()
  uid: ExcelScript!ExcelScript.Range#getNumberFormats:member(1)
  package: ExcelScript!
  fullName: getNumberFormats()
  summary: Stellt den Zahlenformatcode von Excel für den angegebenen Bereich dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormats(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getNumberFormatsLocal()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)
  package: ExcelScript!
  fullName: getNumberFormatsLocal()
  summary: Stellt den Zahlenformatcode von Excel für den angegebenen Bereich basierend auf den Spracheinstellungen des Benutzers dar. Excel führt beim Abrufen oder Festlegen der Eigenschaft keine Sprach- oder Formatkoerzieren `numberFormatLocal` aus. Jeder zurückgegebene Text verwendet die lokal formatierten Zeichenfolgen basierend auf der in den Systemeinstellungen angegebenen Sprache.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatsLocal(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getOffsetRange(rowOffset, columnOffset)
  uid: ExcelScript!ExcelScript.Range#getOffsetRange:member(1)
  package: ExcelScript!
  fullName: getOffsetRange(rowOffset, columnOffset)
  summary: Ruft ein Objekt ab, das einen Bereich darstellt, der aus dem angegebenen Bereich versetzt ist. Die Dimension des zurückgegebenen Bereichs entspricht diesem Bereich. Wenn der resultierende Bereich außerhalb des Arbeitsblatt-Rasters erzwungen wird, wird ein Fehler ausgelöst.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
    parameters:
    - id: rowOffset
      description: Die Anzahl an Zeilen (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.
      type: number
    - id: columnOffset
      description: Die Anzahl an Spalten (positiv, negativ oder 0), um die der Bereich versetzt werden muss. Bei positiven Werten wird der Bereich nach unten versetzt. Bei negativen Werten wird der Bereich nach oben versetzt.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This script gets adjacent cells using relative references.\n * Note that if the active cell is on the top row, part of the script fails, \n * because it references the cell above the currently selected one.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the currently active cell in the workbook.\n  let activeCell = workbook.getActiveCell();\n  console.log(`The active cell's address is: ${activeCell.getAddress()}`);\n\n  // Get the cell to the right of the active cell and set its value and color.\n  let rightCell = activeCell.getOffsetRange(0,1);\n  rightCell.setValue(\"Right cell\");\n  console.log(`The right cell's address is: ${rightCell.getAddress()}`);\n  rightCell.getFormat().getFont().setColor(\"Magenta\");\n  rightCell.getFormat().getFill().setColor(\"Cyan\");\n\n  // Get the cell to the above of the active cell and set its value and color.\n  // Note that this operation will fail if the active cell is in the top row.\n  let aboveCell = activeCell.getOffsetRange(-1, 0);\n  aboveCell.setValue(\"Above cell\");\n  console.log(`The above cell's address is: ${aboveCell.getAddress()}`);\n  aboveCell.getFormat().getFont().setColor(\"White\");\n  aboveCell.getFormat().getFill().setColor(\"Black\");\n}\n```"
- name: getPivotTables(fullyContained)
  uid: ExcelScript!ExcelScript.Range#getPivotTables:member(1)
  package: ExcelScript!
  fullName: getPivotTables(fullyContained)
  summary: Ruft eine Bereichssammlung von PivotTables ab, die mit dem Bereich überlappen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
    parameters:
    - id: fullyContained
      description: If `true`<!-- -->gibt nur PivotTables zurück, die vollständig innerhalb der Bereichsgrenzen enthalten sind. Der Standardwert ist `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]
      description: ''
- name: getPredefinedCellStyle()
  uid: ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle()
  summary: Stellt die Formatvorlage des aktuellen Bereichs dar. Wenn die Formatvorlagen der Zellen inkonsistent sind, `null` wird zurückgegeben. Bei benutzerdefinierten Formatvorlagen wird der Formatvorlagenname zurückgegeben. Bei integrierten Formatvorlagen wird eine Zeichenfolge zurückgegeben, die einen Wert in der Enumeration `BuiltInStyle` darstellt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(): string;'
    return:
      type: string
      description: ''
- name: getRangeEdge(direction, activeCell)
  uid: ExcelScript!ExcelScript.Range#getRangeEdge:member(1)
  package: ExcelScript!
  fullName: getRangeEdge(direction, activeCell)
  summary: Gibt ein Range-Objekt zurück, das die Edgezelle des Datenbereichs ist, die der angegebenen Richtung entspricht. Dies entspricht dem Strg+Pfeil-Tastenverhalten in der Excel unter Windows-Benutzeroberfläche.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getRangeEdge(
                  direction: KeyboardDirection,
                  activeCell?: Range | string
              ): Range;
    parameters:
    - id: direction
      description: Die Richtung von der aktiven Zelle.
      type: <xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />
    - id: activeCell
      description: Die aktive Zelle in diesem Bereich. Standardmäßig ist die aktive Zelle die obere linke Zelle des Bereichs. Wenn sich die aktive Zelle nicht in diesem Bereich befindet, wird ein Fehler ausgelöst.
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getResizedRange(deltaRows, deltaColumns)
  uid: ExcelScript!ExcelScript.Range#getResizedRange:member(1)
  package: ExcelScript!
  fullName: getResizedRange(deltaRows, deltaColumns)
  summary: Ruft ein Objekt ab, das dem aktuellen Objekt ähnelt, jedoch mit seiner unteren rechten Ecke um eine Reihe von Zeilen und Spalten erweitert `Range` `Range` (oder verknrent).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
    parameters:
    - id: deltaRows
      description: Die Anzahl von Zeilen, um die die untere rechte Ecke relativ zum aktuellen Bereich zu erweitern ist. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.
      type: number
    - id: deltaColumns
      description: Die Anzahl der Spalten, um die die untere rechte Ecke relativ zum aktuellen Bereich erweitert werden soll. Verwenden Sie eine positive Zahl, um den Bereich zu erweitern, oder eine negative Zahl, um ihn zu verkleinern.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This script copies the formatting in the active cell to the neighboring cells.\n * Note that this script only works when the active cell isn't on an edge of the worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the active cell.\n  let activeCell = workbook.getActiveCell();\n\n  // Get the cell that's one row above and one column to the left of the active cell.\n  let cornerCell = activeCell.getOffsetRange(-1,-1);\n\n  // Get a range that includes all the cells surrounding the active cell.\n  let surroundingRange = cornerCell.getResizedRange(2, 2)\n\n  // Copy the formatting from the active cell to the new range.\n  surroundingRange.copyFrom(\n    activeCell, /* The source range. */\n    ExcelScript.RangeCopyType.formats /* What to copy. */\n    );\n}\n```"
- name: getRow(row)
  uid: ExcelScript!ExcelScript.Range#getRow:member(1)
  package: ExcelScript!
  fullName: getRow(row)
  summary: Ruft eine Zelle ab, die im Bereich enthalten ist.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRow(row: number): Range;'
    parameters:
    - id: row
      description: Zeilenanzahl des abzurufenden Bereichs. Nullindiziert.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRowCount()
  uid: ExcelScript!ExcelScript.Range#getRowCount:member(1)
  package: ExcelScript!
  fullName: getRowCount()
  summary: Gibt die Anzahl der Zeilen im Bereich zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowCount(): number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample provides the count of negative numbers that are present\n * in the used range of the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the working range.\n  let usedRange = workbook.getActiveWorksheet().getUsedRange();\n  let rowCount = usedRange.getRowCount();\n  let columnCount = usedRange.getColumnCount();\n\n  // Save the values locally to avoid repeatedly asking the workbook.\n  let usedRangeValues = usedRange.getValues();\n\n  // Start the negative number counter.\n  let negativeCount = 0;\n\n  // Iterate over the entire range looking for negative numbers.\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < columnCount; j++) {\n      if (usedRangeValues[i][j] < 0) {\n        negativeCount++;\n      }\n    }\n  }\n\n  // Log the negative number count to the console.\n  console.log(negativeCount);\n}\n```"
- name: getRowHidden()
  uid: ExcelScript!ExcelScript.Range#getRowHidden:member(1)
  package: ExcelScript!
  fullName: getRowHidden()
  summary: Stellt dar, ob alle Zeilen im aktuellen Bereich ausgeblendet sind. Der Wert `true` ist, wenn alle Zeilen in einem Bereich ausgeblendet sind. Der Wert `false` ist, wenn keine Zeilen im Bereich ausgeblendet sind. Der Wert ist, wenn einige Zeilen in einem Bereich ausgeblendet sind und andere Zeilen `null` im gleichen Bereich nicht ausgeblendet werden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getRowIndex()
  uid: ExcelScript!ExcelScript.Range#getRowIndex:member(1)
  package: ExcelScript!
  fullName: getRowIndex()
  summary: Gibt die Spaltenanzahl der ersten Zelle im Bereich zurück. Nullindiziert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowIndex(): number;'
    return:
      type: number
      description: ''
- name: getRowsAbove(count)
  uid: ExcelScript!ExcelScript.Range#getRowsAbove:member(1)
  package: ExcelScript!
  fullName: getRowsAbove(count)
  summary: Ruft eine bestimmte Anzahl von Zeilen über dem aktuellen Objekt `Range` ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsAbove(count?: number): Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRowsBelow(count)
  uid: ExcelScript!ExcelScript.Range#getRowsBelow:member(1)
  package: ExcelScript!
  fullName: getRowsBelow(count)
  summary: Ruft eine bestimmte Anzahl von Zeilen unter dem aktuellen Objekt `Range` ab.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsBelow(count?: number): Range;'
    parameters:
    - id: count
      description: Optional. Die Anzahl von Zeilen, die in den Ergebnisbereich aufgenommen werden soll. Grundsätzlich verwenden Sie eine positive Zahl, um einen Bereich außerhalb des aktuellen Bereichs zu erstellen. Sie können auch eine negative Zahl verwenden, um einen Bereich innerhalb des aktuellen Bereichs zu erstellen. Der Standardwert ist 1.
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSavedAsArray()
  uid: ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)
  package: ExcelScript!
  fullName: getSavedAsArray()
  summary: Stellt dar, ob alle Zellen als Arrayformel gespeichert werden. Gibt zurück, ob alle Zellen als Arrayformel gespeichert würden oder wenn nicht alle Zellen als `true` `false` Arrayformel gespeichert würden. Gibt zurück, ob einige Zellen als Arrayformel gespeichert würden `null` und andere nicht.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSavedAsArray(): boolean;'
    return:
      type: boolean
      description: ''
- name: getSort()
  uid: ExcelScript!ExcelScript.Range#getSort:member(1)
  package: ExcelScript!
  fullName: getSort()
  summary: Stellt die Bereichssortierung des aktuellen Bereichs dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSort(): RangeSort;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeSort:interface" />
      description: ''
- name: getSpecialCells(cellType, cellValueType)
  uid: ExcelScript!ExcelScript.Range#getSpecialCells:member(1)
  package: ExcelScript!
  fullName: getSpecialCells(cellType, cellValueType)
  summary: Ruft das Objekt ab, das einen oder mehrere Bereiche umfasst, das alle Zellen darstellt, die mit dem angegebenen Typ und `RangeAreas` Wert übereinstimmen. Wenn keine speziellen Zellen gefunden werden, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf festgelegt ist. `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getSpecialCells(
                  cellType: SpecialCellType,
                  cellValueType?: SpecialCellValueType
              ): RangeAreas;
    parameters:
    - id: cellType
      description: Der Typ der zellen, die enthalten werden soll.
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />
    - id: cellValueType
      description: If `cellType` is either `constants` or `formulas`<!-- -->, wird dieses Argument verwendet, um zu bestimmen, welche Zellentypen in das Ergebnis enthalten sein sollten. Diese Werte können kombiniert werden, um mehr als einen Typ zurück zu geben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample gets all the blank cells in the current worksheet's used range. It then highlights all those cells with a yellow background.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n    // Get the current used range.\n    let range = workbook.getActiveWorksheet().getUsedRange();\n    \n    // Get all the blank cells.\n    let blankCells = range.getSpecialCells(ExcelScript.SpecialCellType.blanks);\n    // Highlight the blank cells with a yellow background.\n    blankCells.getFormat().getFill().setColor(\"yellow\");\n}\n```"
- name: getSpillingToRange()
  uid: ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)
  package: ExcelScript!
  fullName: getSpillingToRange()
  summary: Ruft beim Aufruf für eine Ankerzelle das Bereichsobjekt ab, das den Überlaufbereich enthält. Wenn der Bereich keine Ankerzelle ist oder der Überlaufbereich nicht gefunden werden kann, gibt diese Funktion ein Objekt zurück, dessen Eigenschaft `isNullObject` auf festgelegt ist. `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillingToRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSpillParent()
  uid: ExcelScript!ExcelScript.Range#getSpillParent:member(1)
  package: ExcelScript!
  fullName: getSpillParent()
  summary: Ruft das Range-Objekt ab, das die Ankerzelle für die Zelle enthält, in die übergelaufen wird. Wenn es sich nicht um eine übergelaufene Zelle handelt oder mehrere Zellen angegeben werden, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf festgelegt ist. `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillParent(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSurroundingRegion()
  uid: ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)
  package: ExcelScript!
  fullName: getSurroundingRegion()
  summary: Gibt ein `Range` Objekt zurück, das den umgebenden Bereich für die zelle oben links in diesem Bereich darstellt. Eine umgebende Region ist ein Bereich, der von einer Kombination von leeren Zeilen und leeren Spalten relativ zu diesem Bereich begrenzt wird.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSurroundingRegion(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getTables(fullyContained)
  uid: ExcelScript!ExcelScript.Range#getTables:member(1)
  package: ExcelScript!
  fullName: getTables(fullyContained)
  summary: Ruft eine bereichsbezogene Sammlung von Tabellen ab, die sich mit dem Bereich überschneidet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(fullyContained?: boolean): Table[];'
    parameters:
    - id: fullyContained
      description: If `true`<!-- -->gibt nur Tabellen zurück, die vollständig innerhalb der Bereichsgrenzen enthalten sind. Der Standardwert ist `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getText()
  uid: ExcelScript!ExcelScript.Range#getText:member(1)
  package: ExcelScript!
  fullName: getText()
  summary: Represents Text value of the specified range. Der Textwert hängt nicht von der Zellenbreite ab. Die Zeichenersetzung, die in der Excel-Benutzeroberfläche erfolgt, wirkt sich nicht auf den von der API \# zurückgegebenen Textwert aus. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getText(): string;'
    return:
      type: string
      description: ''
- name: getTexts()
  uid: ExcelScript!ExcelScript.Range#getTexts:member(1)
  package: ExcelScript!
  fullName: getTexts()
  summary: Textwerte des angegebenen Bereichs. Der Textwert hängt nicht von der Zellenbreite ab. Das Nummernzeichen ( ) ersetzung, das in der Excel-Benutzeroberfläche erfolgt, wirkt sich nicht auf den von der API \# zurückgegebenen Textwert aus.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTexts(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getTop()
  uid: ExcelScript!ExcelScript.Range#getTop:member(1)
  package: ExcelScript!
  fullName: getTop()
  summary: Gibt den Abstand in Punkt für 100 % Zoom vom oberen Rand des Arbeitsblatts zum oberen Rand des Bereichs zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTop(): number;'
    return:
      type: number
      description: ''
- name: getUsedRange(valuesOnly)
  uid: ExcelScript!ExcelScript.Range#getUsedRange:member(1)
  package: ExcelScript!
  fullName: getUsedRange(valuesOnly)
  summary: Gibt den verwendeten Bereich des angegebenen Bereichsobjekts zurück. Wenn innerhalb des Bereichs keine verwendeten Zellen enthalten sind, gibt diese Funktion ein Objekt zurück, dessen `isNullObject` Eigenschaft auf festgelegt ist. `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Betrachtet nur Zellen mit Werten als verwendet.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getValue()
  uid: ExcelScript!ExcelScript.Range#getValue:member(1)
  package: ExcelScript!
  fullName: getValue()
  summary: Stellt den Rohwert des angegebenen Bereichs dar. Die zurückgegebenen Daten können vom Typ Zeichenfolge, Zahl oder ein boolescher Wert sein. Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValue(): string | number | boolean;'
    return:
      type: string | number | boolean
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample reads the value of A1 and prints it to the console.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the value of cell A1.\n  let range = selectedSheet.getRange(\"A1\");\n  \n  // Print the value of A1.\n  console.log(range.getValue());\n}\n```"
- name: getValues()
  uid: ExcelScript!ExcelScript.Range#getValues:member(1)
  package: ExcelScript!
  fullName: getValues()
  summary: Stellt die Rohwerte des angegebenen Bereichs dar. Bei den zurückgegebenen Daten kann es sich um eine Zeichenfolge, eine Zahl oder einen booleschen Wert sein. Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück. Wenn der zurückgegebene Wert mit einem Plus ("+"), Minus ("-") oder Gleichheitszeichen ("=") beginnt, interpretiert Excel diesen Wert als Formel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValues(): (string | number | boolean)[][];'
    return:
      type: (string | number | boolean)[][]
      description: ''
- name: getValueType()
  uid: ExcelScript!ExcelScript.Range#getValueType:member(1)
  package: ExcelScript!
  fullName: getValueType()
  summary: Stellt den Datentyp in der Zelle dar. Wenn der Bereich mehrere Zellen enthält, werden die Daten aus der ersten Zelle (dargestellt durch zeilenindex 0 und Spaltenindex 0) zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValueType(): RangeValueType;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />
      description: ''
- name: getValueTypes()
  uid: ExcelScript!ExcelScript.Range#getValueTypes:member(1)
  package: ExcelScript!
  fullName: getValueTypes()
  summary: Gibt den Datentyp in den einzelnen Zellen an.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValueTypes(): RangeValueType[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />[][]
      description: ''
- name: getVisibleView()
  uid: ExcelScript!ExcelScript.Range#getVisibleView:member(1)
  package: ExcelScript!
  fullName: getVisibleView()
  summary: Stellt die sichtbaren Zeilen des aktuellen Bereichs dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getVisibleView(): RangeView;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeView:interface" />
      description: ''
- name: getWidth()
  uid: ExcelScript!ExcelScript.Range#getWidth:member(1)
  package: ExcelScript!
  fullName: getWidth()
  summary: Gibt den Abstand in Punkt für 100 % Zoom vom linken Rand des Bereichs zum rechten Rand des Bereichs zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWidth(): number;'
    return:
      type: number
      description: ''
- name: getWorksheet()
  uid: ExcelScript!ExcelScript.Range#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet()
  summary: Das Arbeitsblatt, das den aktuellen Bereich enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: group(groupOption)
  uid: ExcelScript!ExcelScript.Range#group:member(1)
  package: ExcelScript!
  fullName: group(groupOption)
  summary: Gruppen von Spalten und Zeilen für eine Gliederung.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, wie der Bereich nach Zeilen oder Spalten gruppieren werden kann. Ein Fehler wird ausgelöst, wenn sich die Gruppenoption von der Eigenschaft des Bereichs unterscheidet (d. h. true und `InvalidArgument` `isEntireRow` `isEntireColumn` `range.isEntireRow` `groupOption` "ByColumns" oder true und `range.isEntireColumn` `groupOption` "ByRows") ist.
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOption)
  uid: ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)
  package: ExcelScript!
  fullName: hideGroupDetails(groupOption)
  summary: Blendet die Details der Zeilen- oder Spaltengruppe aus.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, ob die Details von gruppierenden Zeilen oder gruppenweise Spalten ausgeblendet werden sollen.
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: insert(shift)
  uid: ExcelScript!ExcelScript.Range#insert:member(1)
  package: ExcelScript!
  fullName: insert(shift)
  summary: Fügt eine Zelle oder einen Zellbereich in das Arbeitsblatt anstelle dieses Bereichs ein, und verschiebt die anderen Zellen, um Platz zu schaffen. Gibt ein neues `Range` Objekt im jetzt leeren Leerzeichen zurück.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shift: InsertShiftDirection): Range;'
    parameters:
    - id: shift
      description: Gibt an, wohin die Zellen verschoben werden. Weitere `ExcelScript.InsertShiftDirection` Informationen finden Sie unter.
      type: <xref uid="ExcelScript!ExcelScript.InsertShiftDirection:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: merge(across)
  uid: ExcelScript!ExcelScript.Range#merge:member(1)
  package: ExcelScript!
  fullName: merge(across)
  summary: Führt die Zellen des Bereichs in eine Region im Arbeitsblatt zusammen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'merge(across?: boolean): void;'
    parameters:
    - id: across
      description: Optional. Wird `true` so festgelegt, dass Zellen in jeder Zeile des angegebenen Bereichs als separate zusammengeführte Zellen zusammengeführt werden. Der Standardwert ist `false`<!-- -->.
      type: boolean
    return:
      type: void
      description: ''
- name: moveTo(destinationRange)
  uid: ExcelScript!ExcelScript.Range#moveTo:member(1)
  package: ExcelScript!
  fullName: moveTo(destinationRange)
  summary: Verschiebt Zellenwerte, Formatierungen und Formeln aus dem aktuellen Bereich in den Zielbereich und ersetzt dabei die alten Informationen in diesen Zellen. Der Zielbereich wird automatisch erweitert, wenn er kleiner als der aktuelle Bereich ist. Alle Zellen im Zielbereich, die sich außerhalb des ursprünglichen Bereichs befinden, werden nicht geändert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'moveTo(destinationRange: Range | string): void;'
    parameters:
    - id: destinationRange
      description: destinationRange Gibt den Bereich an, an den die Informationen in diesem Bereich verschoben werden.
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: void
      description: ''
- name: removeDuplicates(columns, includesHeader)
  uid: ExcelScript!ExcelScript.Range#removeDuplicates:member(1)
  package: ExcelScript!
  fullName: removeDuplicates(columns, includesHeader)
  summary: Entfernt doppelte Werte aus dem durch die Spalten angegebenen Bereich.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      removeDuplicates(
                  columns: number[],
                  includesHeader: boolean
              ): RemoveDuplicatesResult;
    parameters:
    - id: columns
      description: Die Spalten innerhalb des Bereichs, die Duplikate enthalten können. Mindestens eine Spalte muss angegeben werden. Nullindiziert.
      type: number[]
    - id: includesHeader
      description: True, wenn die Eingabedaten Kopfzeilen enthalten. Der Standardwert ist „false“.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.RemoveDuplicatesResult:interface" />
      description: ''
- name: replaceAll(text, replacement, criteria)
  uid: ExcelScript!ExcelScript.Range#replaceAll:member(1)
  package: ExcelScript!
  fullName: replaceAll(text, replacement, criteria)
  summary: Sucht und ersetzt die angegebene Zeichenfolge auf der Grundlage der im aktuellen Bereich angegebenen Kriterien.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      replaceAll(
                  text: string,
                  replacement: string,
                  criteria: ReplaceCriteria
              ): number;
    parameters:
    - id: text
      description: Zu suchende Zeichenfolge.
      type: string
    - id: replacement
      description: Die Zeichenfolge, die die ursprüngliche Zeichenfolge ersetzt.
      type: string
    - id: criteria
      description: Zusätzliche Ersetzungskriterien.
      type: <xref uid="ExcelScript!ExcelScript.ReplaceCriteria:interface" />
    return:
      type: number
      description: ''
- name: select()
  uid: ExcelScript!ExcelScript.Range#select:member(1)
  package: ExcelScript!
  fullName: select()
  summary: Wählt den angegebenen Bereich in der Excel-Benutzeroberfläche aus.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(): void;'
    return:
      type: void
      description: ''
- name: setColumnHidden(columnHidden)
  uid: ExcelScript!ExcelScript.Range#setColumnHidden:member(1)
  package: ExcelScript!
  fullName: setColumnHidden(columnHidden)
  summary: Stellt dar, ob alle Spalten im aktuellen Bereich ausgeblendet sind. Der Wert `true` ist, wenn alle Spalten in einem Bereich ausgeblendet sind. Der Wert `false` ist, wenn keine Spalten im Bereich ausgeblendet sind. Der Wert ist, wenn einige Spalten in einem Bereich ausgeblendet sind und andere `null` Spalten im gleichen Bereich nicht ausgeblendet werden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setColumnHidden(columnHidden: boolean): void;'
    parameters:
    - id: columnHidden
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setDirty()
  uid: ExcelScript!ExcelScript.Range#setDirty:member(1)
  package: ExcelScript!
  fullName: setDirty()
  summary: Legt für einen Bereich Neuberechnung bei der nächsten auszuführenden Neuberechnung fest.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDirty(): void;'
    return:
      type: void
      description: ''
- name: setFormula(formula)
  uid: ExcelScript!ExcelScript.Range#setFormula:member(1)
  package: ExcelScript!
  fullName: setFormula(formula)
  summary: Legt die Zellformel in der Notation im Format A1 fest. Wenn der Bereich mehrere Zellen enthält, wird jede Zelle im angegebenen Bereich mit den Eingabedaten aktualisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormula(formula: string): void;'
    parameters:
    - id: formula
      description: ''
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/*\n * This script sets a cell's formula, \n * then displays how Excel stores the cell's formula and value separately.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Set A1 to 2.\n  let a1 = selectedSheet.getRange(\"A1\");\n  a1.setValue(2);\n\n  // Set B1 to the formula =(2*A1), which should equal 4.\n  let b1 = selectedSheet.getRange(\"B1\")\n  b1.setFormula(\"=(2*A1)\");\n\n  // Log the current results for `getFormula` and `getValue` at B1.\n  console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);\n}\n```"
- name: setFormulaLocal(formulaLocal)
  uid: ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)
  package: ExcelScript!
  fullName: setFormulaLocal(formulaLocal)
  summary: Legen Sie die Zellenformel in der Notation im Format A1 im Sprach- und Zahlenformatierungs-Locale des Benutzers fest. Beispielsweise würde die englische Formel „= SUM(A1, 1.5)“ in Deutsch „= SUMME(A1; 1,5)“ werden. Wenn der Bereich mehrere Zellen enthält, wird jede Zelle im angegebenen Bereich mit den Eingabedaten aktualisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulaLocal(formulaLocal: string): void;'
    parameters:
    - id: formulaLocal
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setFormulaR1C1(formulaR1C1)
  uid: ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)
  package: ExcelScript!
  fullName: setFormulaR1C1(formulaR1C1)
  summary: Legt die Zellformel in der R1C1-Formatvorlage fest. Wenn der Bereich mehrere Zellen enthält, wird jede Zelle im angegebenen Bereich mit den Eingabedaten aktualisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulaR1C1(formulaR1C1: string): void;'
    parameters:
    - id: formulaR1C1
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setFormulas(formulas)
  uid: ExcelScript!ExcelScript.Range#setFormulas:member(1)
  package: ExcelScript!
  fullName: setFormulas(formulas)
  summary: Stellt die Formel in der A1-Schreibweise dar. Wenn eine Zelle keine Formel hat, wird stattdessen ihr Wert zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulas(formulas: string[][]): void;'
    parameters:
    - id: formulas
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setFormulasLocal(formulasLocal)
  uid: ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)
  package: ExcelScript!
  fullName: setFormulasLocal(formulasLocal)
  summary: Stellt die Formel in der A1-Schreibweise, Sprache des Benutzers und im Gebietsschema der Zahlenformatierung dar. Beispielsweise würde die englische Formel „= SUM(A1, 1.5)“ in Deutsch „= SUMME(A1; 1,5)“ werden. Wenn eine Zelle keine Formel hat, wird stattdessen ihr Wert zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulasLocal(formulasLocal: string[][]): void;'
    parameters:
    - id: formulasLocal
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setFormulasR1C1(formulasR1C1)
  uid: ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)
  package: ExcelScript!
  fullName: setFormulasR1C1(formulasR1C1)
  summary: Stellt die Formel in der R1C1-Schreibweise dar. Wenn eine Zelle keine Formel hat, wird stattdessen ihr Wert zurückgegeben.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
    parameters:
    - id: formulasR1C1
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setHyperlink(hyperlink)
  uid: ExcelScript!ExcelScript.Range#setHyperlink:member(1)
  package: ExcelScript!
  fullName: setHyperlink(hyperlink)
  summary: Stellt den Hyperlink für den aktuellen Bereich dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
    parameters:
    - id: hyperlink
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/** \n * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the active cell.\n  let cell = workbook.getActiveCell();\n\n  // Get the last worksheet in the workbook.\n  // Note that this might be the current sheet if there's only one worksheet.\n  let lastSheet = workbook.getLastWorksheet();\n\n  // Get sheet name. \n  let linkedSheetName = lastSheet.getName();\n  console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);\n\n  // Set the text for the hyperlink.\n  let value = `Click to go to: ${linkedSheetName}`;\n\n  // Create the hyperlink using that cell's value.\n  cell.setHyperlink({\n    textToDisplay: value.toString(),\n    screenTip: `Navigate to ${linkedSheetName}`,\n    documentReference: `${linkedSheetName}!A1`\n  });\n}\n```"
- name: setNumberFormat(numberFormat)
  uid: ExcelScript!ExcelScript.Range#setNumberFormat:member(1)
  package: ExcelScript!
  fullName: setNumberFormat(numberFormat)
  summary: Legt den Excel-Zahlenformatcode für den angegebenen Bereich fest. Wenn der Bereich mehrere Zellen enthält, wird jede Zelle im angegebenen Bereich mit den Eingabedaten aktualisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormat(numberFormat: string): void;'
    parameters:
    - id: numberFormat
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setNumberFormatLocal(numberFormatLocal)
  uid: ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)
  package: ExcelScript!
  fullName: setNumberFormatLocal(numberFormatLocal)
  summary: Legt den Excel-Nummernformatcode für den angegebenen Bereich basierend auf den Spracheinstellungen des Benutzers fest. Excel führt beim Abrufen oder Festlegen der Eigenschaft keine Sprach- oder Formatkoerzieren `numberFormatLocal` aus. Jeder zurückgegebene Text verwendet die lokal formatierten Zeichenfolgen basierend auf der in den Systemeinstellungen angegebenen Sprache. Wenn der Bereich mehrere Zellen enthält, wird jede Zelle im angegebenen Bereich mit den Eingabedaten aktualisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
    parameters:
    - id: numberFormatLocal
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setNumberFormats(numberFormats)
  uid: ExcelScript!ExcelScript.Range#setNumberFormats:member(1)
  package: ExcelScript!
  fullName: setNumberFormats(numberFormats)
  summary: Stellt den Zahlenformatcode von Excel für den angegebenen Bereich dar.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormats(numberFormats: string[][]): void;'
    parameters:
    - id: numberFormats
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setNumberFormatsLocal(numberFormatsLocal)
  uid: ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)
  package: ExcelScript!
  fullName: setNumberFormatsLocal(numberFormatsLocal)
  summary: Stellt den Zahlenformatcode von Excel für den angegebenen Bereich basierend auf den Spracheinstellungen des Benutzers dar. Excel führt beim Abrufen oder Festlegen der Eigenschaft keine Sprach- oder Formatkoerzieren `numberFormatLocal` aus. Jeder zurückgegebene Text verwendet die lokal formatierten Zeichenfolgen basierend auf der in den Systemeinstellungen angegebenen Sprache.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
    parameters:
    - id: numberFormatsLocal
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setPredefinedCellStyle(predefinedCellStyle)
  uid: ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: setPredefinedCellStyle(predefinedCellStyle)
  summary: Stellt die Formatvorlage des aktuellen Bereichs dar. Wenn die Formatvorlagen der Zellen inkonsistent sind, `null` wird zurückgegeben. Bei benutzerdefinierten Formatvorlagen wird der Formatvorlagenname zurückgegeben. Bei integrierten Formatvorlagen wird eine Zeichenfolge zurückgegeben, die einen Wert in der Enumeration `BuiltInStyle` darstellt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
    parameters:
    - id: predefinedCellStyle
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setRowHidden(rowHidden)
  uid: ExcelScript!ExcelScript.Range#setRowHidden:member(1)
  package: ExcelScript!
  fullName: setRowHidden(rowHidden)
  summary: Stellt dar, ob alle Zeilen im aktuellen Bereich ausgeblendet sind. Der Wert `true` ist, wenn alle Zeilen in einem Bereich ausgeblendet sind. Der Wert `false` ist, wenn keine Zeilen im Bereich ausgeblendet sind. Der Wert ist, wenn einige Zeilen in einem Bereich ausgeblendet sind und andere Zeilen `null` im gleichen Bereich nicht ausgeblendet werden.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setRowHidden(rowHidden: boolean): void;'
    parameters:
    - id: rowHidden
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setValue(value)
  uid: ExcelScript!ExcelScript.Range#setValue:member(1)
  package: ExcelScript!
  fullName: setValue(value)
  summary: Legt den Rohwert des angegebenen Bereichs fest. Die festgelegten Daten können vom Typ string, number oder boolean sein. `null` wert wird ignoriert (in Excel nicht festgelegt oder überschrieben). Wenn der Bereich mehrere Zellen enthält, wird jede Zelle im angegebenen Bereich mit den Eingabedaten aktualisiert.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setValue(value: any): void;'
    parameters:
    - id: value
      description: ''
      type: any
    return:
      type: void
      description: ''
- name: setValues(values)
  uid: ExcelScript!ExcelScript.Range#setValues:member(1)
  package: ExcelScript!
  fullName: setValues(values)
  summary: Stellt die Rohwerte des angegebenen Bereichs dar. Bei den zurückgegebenen Daten kann es sich um eine Zeichenfolge, eine Zahl oder einen booleschen Wert sein. Zellen, die einen Fehler enthalten, geben die Fehlerzeichenfolge zurück. Wenn der zurückgegebene Wert mit einem Plus ("+"), Minus ("-") oder Gleichheitszeichen ("=") beginnt, interpretiert Excel diesen Wert als Formel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setValues(values: (string | number | boolean)[][]): void;'
    parameters:
    - id: values
      description: ''
      type: (string | number | boolean)[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample inserts some pre-loaded data into a range.\n * It also shows how to get a range that fits the data.\n */\n function main(workbook: ExcelScript.Workbook) {\n   // Get the active cell.\n   let currentCell = workbook.getActiveCell();\n   \n   // Calculate the range needed to fit the given data.\n   let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);\n\n   // Set range values to the data.\n   targetRange.setValues(DATA);\n\n   // Autofit the columns so the worksheet is readable. \n   targetRange.getFormat().autofitColumns();\n }\n\n /* \n  * This sample's data is in a static 2-dimensional array.\n  * You could also get the input from other ranges or sources.\n  * Note that each row must have the same number of columns to be valid. \n  */\n const DATA = [\n   ['Date', 'Salesperson', 'Product', 'Amount']\n   , ['3/2/2020', 'Anne', 'Pizza', '$1400']\n   , ['3/2/2020', 'Mariya', 'Pizza', '$1700']\n   , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']\n   , ['3/24/2020', 'Anne', 'Pizza', '$750']\n   , ['3/28/2020', 'Mark', 'Salads', '$510']\n   , ['4/17/2020', 'Laura', 'Salads', '$900']\n   , ['4/17/2020', 'Mariya', 'Salads', '$1600']\n   , ['4/28/2020', 'Laura', 'Sandwiches', '$680']\n ];\n```"
- name: showCard()
  uid: ExcelScript!ExcelScript.Range#showCard:member(1)
  package: ExcelScript!
  fullName: showCard()
  summary: Zeigt die Karte für eine aktive Zelle an, wenn sie einen hohen Wertinhalt hat.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showCard(): void;'
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOption)
  uid: ExcelScript!ExcelScript.Range#showGroupDetails:member(1)
  package: ExcelScript!
  fullName: showGroupDetails(groupOption)
  summary: Zeigt die Details der Zeilen- oder Spaltengruppe an.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, ob die Details von gruppierungen Zeilen oder Spalten angezeigt werden sollen.
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: ungroup(groupOption)
  uid: ExcelScript!ExcelScript.Range#ungroup:member(1)
  package: ExcelScript!
  fullName: ungroup(groupOption)
  summary: Aufheben der Gruppierung von Spalten und Zeilen für eine Gliederung.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: Gibt an, wie der Bereich nach Zeilen oder Spalten ungruppiert werden kann.
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: unmerge()
  uid: ExcelScript!ExcelScript.Range#unmerge:member(1)
  package: ExcelScript!
  fullName: unmerge()
  summary: Hebt den Zellverbund des Bereichs in einzelne Zellen auf.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'unmerge(): void;'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 1170c2483f4795587758037090678928c8b6bbbf
  ms.sourcegitcommit: 41542794df8af7ea28b8d7db989fba7ec77b6b0c
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 05/12/2021
  ms.locfileid: "52330355"
