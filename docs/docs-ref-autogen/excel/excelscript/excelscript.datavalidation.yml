### YamlMime:TSType
name: ExcelScript.DataValidation
uid: ExcelScript!ExcelScript.DataValidation:interface
package: ExcelScript!
fullName: ExcelScript.DataValidation
summary: Stellt die Datenüberprüfung dar, die auf den aktuellen Bereich angewendet wurde.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: clear()
  uid: ExcelScript!ExcelScript.DataValidation#clear:member(1)
  package: ExcelScript!
  fullName: clear()
  summary: Löscht die Datenüberprüfung aus dem aktuellen Bereich.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: getErrorAlert()
  uid: ExcelScript!ExcelScript.DataValidation#getErrorAlert:member(1)
  package: ExcelScript!
  fullName: getErrorAlert()
  summary: Fehlermeldung, wenn Benutzer ungültige Daten eingibt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getErrorAlert(): DataValidationErrorAlert;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidationErrorAlert:interface" />
      description: ''
- name: getIgnoreBlanks()
  uid: ExcelScript!ExcelScript.DataValidation#getIgnoreBlanks:member(1)
  package: ExcelScript!
  fullName: getIgnoreBlanks()
  summary: Gibt an, ob die Datenüberprüfung für leere Zellen ausgeführt wird. Standard ist `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIgnoreBlanks(): boolean;'
    return:
      type: boolean
      description: ''
- name: getInvalidCells()
  uid: ExcelScript!ExcelScript.DataValidation#getInvalidCells:member(1)
  package: ExcelScript!
  fullName: getInvalidCells()
  summary: Gibt ein Objekt mit einem `RangeAreas` oder mehreren rechteckigen Bereichen mit ungültigen Zellwerten zurück. Wenn alle Zellwerte gültig sind, gibt diese Methode `null`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getInvalidCells(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getPrompt()
  uid: ExcelScript!ExcelScript.DataValidation#getPrompt:member(1)
  package: ExcelScript!
  fullName: getPrompt()
  summary: Eingabeaufforderung, wenn Benutzer eine Zelle auswählen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrompt(): DataValidationPrompt;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidationPrompt:interface" />
      description: ''
- name: getRule()
  uid: ExcelScript!ExcelScript.DataValidation#getRule:member(1)
  package: ExcelScript!
  fullName: getRule()
  summary: Datenüberprüfungsregel, die unterschiedliche Arten von Datenüberprüfungskriterien enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRule(): DataValidationRule;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidationRule:interface" />
      description: ''
- name: getType()
  uid: ExcelScript!ExcelScript.DataValidation#getType:member(1)
  package: ExcelScript!
  fullName: getType()
  summary: Der Typ der Datenüberprüfung finden Sie `ExcelScript.DataValidationType` unter Details.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getType(): DataValidationType;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidationType:enum" />
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This sample reads and logs the data validation type of the currently selected range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the currently selected range.\n  let range = workbook.getSelectedRange();\n\n  // Get the type (`DataValidationType`) of data validation applied to the range.\n  let validationType = range.getDataValidation().getType();\n\n  /*\n   * Log the data validation type.\n   * If the range has a single value, it logs that type.\n   * If the range doesn't have data validation applied, it logs \"None\".\n   * If the range has multiple different types of data validation, it logs \"Inconsistent\" or \"MixedCriteria\".\n   */\n  console.log(validationType.toString());\n}\n```"
- name: getValid()
  uid: ExcelScript!ExcelScript.DataValidation#getValid:member(1)
  package: ExcelScript!
  fullName: getValid()
  summary: Gibt an, ob alle Zellwerte entsprechend den Datenüberprüfungsregeln gültig sind. Gibt zurück `true` , ob alle Zellwerte gültig sind oder `false` wenn alle Zellwerte ungültig sind. Gibt zurück `null` , ob sowohl gültige als auch ungültige Zellwerte innerhalb des Bereichs vorhanden sind.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValid(): boolean;'
    return:
      type: boolean
      description: ''
- name: setErrorAlert(errorAlert)
  uid: ExcelScript!ExcelScript.DataValidation#setErrorAlert:member(1)
  package: ExcelScript!
  fullName: setErrorAlert(errorAlert)
  summary: Fehlermeldung, wenn Benutzer ungültige Daten eingibt.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setErrorAlert(errorAlert: DataValidationErrorAlert): void;'
    parameters:
    - id: errorAlert
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.DataValidationErrorAlert:interface" />
    return:
      type: void
      description: ''
- name: setIgnoreBlanks(ignoreBlanks)
  uid: ExcelScript!ExcelScript.DataValidation#setIgnoreBlanks:member(1)
  package: ExcelScript!
  fullName: setIgnoreBlanks(ignoreBlanks)
  summary: Gibt an, ob die Datenüberprüfung für leere Zellen ausgeführt wird. Standard ist `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setIgnoreBlanks(ignoreBlanks: boolean): void;'
    parameters:
    - id: ignoreBlanks
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setPrompt(prompt)
  uid: ExcelScript!ExcelScript.DataValidation#setPrompt:member(1)
  package: ExcelScript!
  fullName: setPrompt(prompt)
  summary: Eingabeaufforderung, wenn Benutzer eine Zelle auswählen.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPrompt(prompt: DataValidationPrompt): void;'
    parameters:
    - id: prompt
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.DataValidationPrompt:interface" />
    return:
      type: void
      description: ''
- name: setRule(rule)
  uid: ExcelScript!ExcelScript.DataValidation#setRule:member(1)
  package: ExcelScript!
  fullName: setRule(rule)
  summary: Datenüberprüfungsregel, die unterschiedliche Arten von Datenüberprüfungskriterien enthält.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setRule(rule: DataValidationRule): void;'
    parameters:
    - id: rule
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.DataValidationRule:interface" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Beispiele\n\n```TypeScript\n/**\n * This script creates a data validation rule for the range B1:B5.\n * All values in that range must be a positive number.\n * Attempts to enter other values are blocked and an error message appears.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range B1:B5 in the active worksheet.\n  const currentSheet = workbook.getActiveWorksheet();\n  const positiveNumberOnlyCells = currentSheet.getRange(\"B1:B5\");\n\n  // Create a data validation rule to only allow positive numbers.\n  const positiveNumberValidation: ExcelScript.BasicDataValidation = {\n    formula1: \"0\",\n    operator: ExcelScript.DataValidationOperator.greaterThan\n  };\n  const positiveNumberOnlyRule: ExcelScript.DataValidationRule = {\n    wholeNumber: positiveNumberValidation\n  };\n\n  // Set the rule on the range.\n  const rangeDataValidation = positiveNumberOnlyCells.getDataValidation();\n  rangeDataValidation.setRule(positiveNumberOnlyRule);\n\n  // Create an alert to appear when data other than positive numbers are entered.\n  const positiveNumberOnlyAlert: ExcelScript.DataValidationErrorAlert = {\n    message: \"Positive numbers only\",\n    showAlert: true,\n    style: ExcelScript.DataValidationAlertStyle.stop,\n    title: \"Invalid data\"\n  };\n  rangeDataValidation.setErrorAlert(positiveNumberOnlyAlert);\n}\n```"
metadata:
  ms.openlocfilehash: 0c8131bf0d480ce14d4578e6a51a876090f90201
  ms.sourcegitcommit: f004fc5d3ebfc650a5a353e05f1d75c2bc330f09
  ms.translationtype: MT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/26/2022
  ms.locfileid: "68698201"
