### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.RangeAreas:class'
    summary: 'RangeAreas stellt eine Auflistung von einem oder mehreren rechteckigen Bereichen im gleichen Arbeitsblatt dar. Informationen zur Verwendung von discontinguous-Bereichen finden Sie unter [Arbeiten mit mehreren Bereichen gleichzeitig in Excel-Add-ins](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-multiple-ranges) .<!-- -->.'
    name: Excel.RangeAreas
    fullName: Excel.RangeAreas
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.RangeAreas#address:member'
      - 'excel!Excel.RangeAreas#addressLocal:member'
      - 'excel!Excel.RangeAreas#areaCount:member'
      - 'excel!Excel.RangeAreas#areas:member'
      - 'excel!Excel.RangeAreas#calculate:member(1)'
      - 'excel!Excel.RangeAreas#cellCount:member'
      - 'excel!Excel.RangeAreas#clear:member(1)'
      - 'excel!Excel.RangeAreas#clear:member(2)'
      - 'excel!Excel.RangeAreas#conditionalFormats:member'
      - 'excel!Excel.RangeAreas#context:member'
      - 'excel!Excel.RangeAreas#convertDataTypeToText:member(1)'
      - 'excel!Excel.RangeAreas#convertToLinkedDataType:member(1)'
      - 'excel!Excel.RangeAreas#copyFrom:member(1)'
      - 'excel!Excel.RangeAreas#copyFrom:member(2)'
      - 'excel!Excel.RangeAreas#dataValidation:member'
      - 'excel!Excel.RangeAreas#format:member'
      - 'excel!Excel.RangeAreas#getEntireColumn:member(1)'
      - 'excel!Excel.RangeAreas#getEntireRow:member(1)'
      - 'excel!Excel.RangeAreas#getIntersection:member(1)'
      - 'excel!Excel.RangeAreas#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#getOffsetRangeAreas:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCells:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCells:member(2)'
      - 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.RangeAreas#getTables:member(1)'
      - 'excel!Excel.RangeAreas#getUsedRangeAreas:member(1)'
      - 'excel!Excel.RangeAreas#getUsedRangeAreasOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#isEntireColumn:member'
      - 'excel!Excel.RangeAreas#isEntireRow:member'
      - 'excel!Excel.RangeAreas#load:member(1)'
      - 'excel!Excel.RangeAreas#load:member(2)'
      - 'excel!Excel.RangeAreas#set:member(1)'
      - 'excel!Excel.RangeAreas#setDirty:member(1)'
      - 'excel!Excel.RangeAreas#style:member'
      - 'excel!Excel.RangeAreas#track:member(1)'
      - 'excel!Excel.RangeAreas#untrack:member(1)'
      - 'excel!Excel.RangeAreas#worksheet:member'
  - uid: 'excel!Excel.RangeAreas#address:member'
    summary: 'Gibt den RageAreas-Bezug in der A1-Schreibweise zurück. Der Adresswert enthält den Namen des Tabellenblatts für jeden rechteckigen Zellenblock (z. B. "Blatt1!A1:B4, Blatt1!D1:D4"). Schreibgeschützt.'
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#addressLocal:member'
    summary: Gibt den RageAreas-Bezug im Gebietsschema des Benutzers zurück. Schreibgeschützt.
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#areaCount:member'
    summary: 'Gibt die Anzahl der rechteckigen Bereiche zurück, die dieses RangeAreas-Objekt bilden.'
    name: areaCount
    fullName: areaCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly areaCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeAreas#areas:member'
    summary: 'Gibt eine Sammlung der rechteckigen Bereiche zurück, die dieses RangeAreas-Objekt bilden.'
    name: areas
    fullName: areas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly areas: Excel.RangeCollection;'
      return:
        type:
          - 'excel!Excel.RangeCollection:class'
  - uid: 'excel!Excel.RangeAreas#calculate:member(1)'
    summary: Berechnet alle Zellen in RangeAreas.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#cellCount:member'
    summary: 'Gibt die Anzahl der Zellen in RangeAreas-Objekt zurück und addiert dabei die Zellanzahl aller rechteckigen Einzelbereiche. Gibt -1 zurück, wenn die Zellanzahl 2^31-1 (2,147,483,647) überschreitet. Schreibgeschützt.'
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeAreas#clear:member(1)'
    summary: 'Löscht Werte, Format, Füllung, Rahmen usw. in jedem der Bereiche, die dieses RangeAreas-Objekt bilden.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Optional. Bestimmt den Typ der Löschaktion. Weitere Informationen finden Sie unter Excel. ClearApplyTo. Der Standardwert ist "All".
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.RangeAreas#clear:member(2)'
    summary: 'Löscht Werte, Format, Füllung, Rahmen usw. in jedem der Bereiche, die dieses RangeAreas-Objekt bilden.'
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: Optional. Bestimmt den Typ der Löschaktion. Weitere Informationen finden Sie unter Excel. ClearApplyTo. Der Standardwert ist "All".
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.RangeAreas#conditionalFormats:member'
    summary: 'Gibt eine Sammlung von ConditionalFormats zurück, die sich mit Zellen in diesem RangeAreas-Objekt überschneiden. Schreibgeschützt.'
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.RangeAreas#context:member'
    summary: 'Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.RangeAreas#convertDataTypeToText:member(1)'
    summary: Konvertiert alle Zellen in RangeAreas mit Datentypen in Text.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#convertToLinkedDataType:member(1)'
    summary: Konvertiert alle Zellen in RangeAreas in den verknüpften Datentyp.
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: 'Die Dienst-ID, die zum Abfragen der Daten verwendet wird.'
          type:
            - number
        - id: languageCulture
          description: 'Sprach Kultur, für die der Dienst abgefragt werden soll.'
          type:
            - string
  - uid: 'excel!Excel.RangeAreas#copyFrom:member(1)'
    summary: 'Kopiert Daten oder Formatierung von Zellen aus dem Quellbereich oder RangeAreas in das aktuelle RangeAreas-Objekt. Das Ziel-rangeAreas kann eine andere Größe als der Quellbereich oder rangeAreas sein. Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.'
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 'Der Quellbereich oder RangeAreas, aus dem kopiert werden soll. Wenn die Quell-RangeAreas mehrere Bereiche aufweist, muss Ihr Formular in der Lage sein, durch Entfernen ganzer Zeilen oder Spalten aus einem rechteckigen Bereich erstellt zu werden.'
          type:
            - 'excel!Excel.RangeAreas#copyFrom~0:complex'
        - id: copyType
          description: Der Typ der zu kopierende Zellendaten oder-Formatierung. Der Standardwert ist "All".
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: 'True, wenn leere Zellen im Quellbereich oder RangeAreas übersprungen werden sollen. Der Standardwert ist „false“.'
          type:
            - boolean
        - id: transpose
          description: 'True, wenn die Zellen im Ziel RangeAreas transponieren. Der Standardwert ist „false“.'
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#copyFrom:member(2)'
    summary: 'Kopiert Daten oder Formatierung von Zellen aus dem Quellbereich oder RangeAreas in das aktuelle RangeAreas-Objekt. Das Ziel-rangeAreas kann eine andere Größe als der Quellbereich oder rangeAreas sein. Das Ziel wird automatisch erweitert, wenn es kleiner als die Quelle ist.'
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 'Der Quellbereich oder RangeAreas, aus dem kopiert werden soll. Wenn die Quell-RangeAreas mehrere Bereiche aufweist, muss Ihr Formular in der Lage sein, durch Entfernen ganzer Zeilen oder Spalten aus einem rechteckigen Bereich erstellt zu werden.'
          type:
            - 'excel!Excel.RangeAreas#copyFrom~1:complex'
        - id: copyTypeString
          description: Der Typ der zu kopierende Zellendaten oder-Formatierung. Der Standardwert ist "All".
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: 'True, wenn leere Zellen im Quellbereich oder RangeAreas übersprungen werden sollen. Der Standardwert ist „false“.'
          type:
            - boolean
        - id: transpose
          description: 'True, wenn die Zellen im Ziel RangeAreas transponieren. Der Standardwert ist „false“.'
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#dataValidation:member'
    summary: Gibt ein dataValidation-Objekt für alle Bereiche im RangeAreas zurück.
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.RangeAreas#format:member'
    summary: 'Gibt ein rangeFormat-Objekt zurück, das Schriftart, Füllung, Rahmen, Ausrichtung und weitere Eigenschaften für alle Bereiche im RangeAreas-Objekt kapselt. Schreibgeschützt.'
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {

              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let usedRange = sheet.getUsedRange();

              // Find the ranges with formulas.
              let formulaRanges = usedRange.getSpecialCells("Formulas");
              formulaRanges.format.fill.color = "lightgreen";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.RangeAreas#getEntireColumn:member(1)'
    summary: 'Gibt ein RangeAreas-Objekt zurück, das die gesamten Spalten von RangeAreas darstellt (wenn beispielsweise das aktuelle RangeAreas die Zellen "B4:E11, H2" darstellt, wird ein RangeAreas-Objekt zurückgegeben, das die Spalten "B:E, H:H" darstellt).'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#getEntireRow:member(1)'
    summary: 'Gibt ein RangeAreas-Objekt zurück, das die gesamten Zeilen von RangeAreas darstellt (wenn beispielsweise das aktuelle RangeAreas die Zellen "B4:E11" darstellt, wird ein RangeAreas-Objekt zurückgegeben, das die Zeilen "4:11" darstellt).'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#getIntersection:member(1)'
    summary: 'Gibt das RangeAreas-Objekt zurück, das die Schnittmenge der angegebenen Bereiche oder RangeAreas darstellt. Wenn keine Schnittmenge gefunden wird, wird ein ItemNotFound-Fehler ausgelöst.'
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | RangeAreas | string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: anotherRange
          description: 'Der Bereich, das RangeAreas-Objekt oder die Bereichsadresse, die zum Bestimmen der Schnittmenge verwendet wird.'
          type:
            - 'excel!Excel.RangeAreas#getIntersection~0:complex'
  - uid: 'excel!Excel.RangeAreas#getIntersectionOrNullObject:member(1)'
    summary: 'Gibt das RangeAreas-Objekt zurück, das die Schnittmenge der angegebenen Bereiche oder RangeAreas darstellt. Wenn keine Schnittmenge gefunden wird, wird ein NULL-Objekt zurückgegeben.'
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | RangeAreas | string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: anotherRange
          description: 'Der Bereich, RangeAreas oder die Adresse, die verwendet wird, um die Schnittmenge zu bestimmen.'
          type:
            - 'excel!Excel.RangeAreas#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.RangeAreas#getOffsetRangeAreas:member(1)'
    summary: 'Gibt ein RangeAreas-Objekt zurück, das um den angegebenen Zeilen- und Spaltenoffset verschoben ist. Die Dimension des zurückgegebenen RangeAreas stimmt mit dem ursprünglichen Objekt überein. Wenn das sich ergebende RangeAreas außerhalb der Grenzen des Arbeitsblattrasters zu liegen kommt, wird ein Fehler ausgelöst.'
    name: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    fullName: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRangeAreas(rowOffset: number, columnOffset: number): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: rowOffset
          description: 'Die Anzahl der Zeilen (positiv, negativ oder 0), mit denen die RangeAreas versetzt werden soll. Bei positiven Werten erfolgt der Versatz nach unten, bei negativen Werten nach oben.'
          type:
            - number
        - id: columnOffset
          description: 'Die Anzahl der Spalten (positiv, negativ oder 0), mit denen die RangeAreas versetzt werden soll. Bei positiven Werten erfolgt der Versatz nach rechts, bei negativen Werten nach links.'
          type:
            - number
  - uid: 'excel!Excel.RangeAreas#getSpecialCells:member(1)'
    summary: 'Gibt ein RangeAreas-Objekt zurück, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Löst einen Fehler aus, wenn keine besonderen Zellen gefunden werden, die den Kriterien entsprechen.'
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: Der Typ der einzuschließenden Zellen.
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 'Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen. Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.RangeAreas#getSpecialCells:member(2)'
    summary: 'Gibt ein RangeAreas-Objekt zurück, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Löst einen Fehler aus, wenn keine besonderen Zellen gefunden werden, die den Kriterien entsprechen.'
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: Der Typ der einzuschließenden Zellen.
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: 'Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen. Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(1)'
    summary: 'Gibt ein RangeAreas-Objekt zurück, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Gibt ein NULL-Objekt zurück, wenn keine besonderen Zellen gefunden werden, die den Kriterien entsprechen.'
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: Der Typ der einzuschließenden Zellen.
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 'Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen. Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(2)'
    summary: 'Gibt ein RangeAreas-Objekt zurück, das alle Zellen darstellt, die dem angegebenen Typ und Wert entsprechen. Gibt ein NULL-Objekt zurück, wenn keine besonderen Zellen gefunden werden, die den Kriterien entsprechen.'
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: Der Typ der einzuschließenden Zellen.
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: 'Wenn CellType entweder Konstanten oder Formeln ist, wird dieses Argument verwendet, um zu bestimmen, welche Arten von Zellen in das Ergebnis einbezogen werden sollen. Diese Werte können miteinander kombiniert werden, um mehr als einen Typ zurückzugeben. Standardmäßig werden alle Konstanten oder Formeln unabhängig vom Typ ausgewählt.'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.RangeAreas#getTables:member(1)'
    summary: 'Gibt eine bereichsbezogene Sammlung von Tabellen zurück, die sich mit einem beliebigen Bereich in diesem RangeAreas-Objekt überschneiden.'
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Wenn true, werden nur Tabellen zurückgegeben, die vollständig innerhalb der Bereichsgrenzen enthalten sind. Der Standardwert ist „false“.'
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#getUsedRangeAreas:member(1)'
    summary: 'Gibt das verwendete RangeAreas zurück, das alle verwendeten Bereiche einzelner rechteckiger Bereiche im RangeAreas-Objekt umfasst. Wenn in der RangeAreas keine Zellen verwendet werden, wird der ItemNotFound-Fehler ausgelöst.'
    name: getUsedRangeAreas(valuesOnly)
    fullName: getUsedRangeAreas(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreas(valuesOnly?: boolean): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: 'Gibt an, ob Zellen mit Werten als verwendete Zellen betrachtet werden sollen. Der Standardwert ist „false“.'
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#getUsedRangeAreasOrNullObject:member(1)'
    summary: 'Gibt das verwendete RangeAreas zurück, das alle verwendeten Bereiche einzelner rechteckiger Bereiche im RangeAreas-Objekt umfasst. Wenn in der RangeAreas keine Zellen verwendet werden, wird ein NULL-Objekt zurückgegeben.'
    name: getUsedRangeAreasOrNullObject(valuesOnly)
    fullName: getUsedRangeAreasOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreasOrNullObject(valuesOnly?: boolean): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: 'Gibt an, ob Zellen mit Werten als verwendete Zellen betrachtet werden sollen.'
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#isEntireColumn:member'
    summary: 'Gibt an, ob alle Bereiche in diesem RangeAreas-Objekt ganze Spalten darstellen (z. B. "A:C, Q:Z"). Schreibgeschützt.'
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.RangeAreas#isEntireRow:member'
    summary: 'Gibt an, ob alle Bereiche in diesem RangeAreas-Objekt ganze Zeilen darstellen (z. B. "1:3, 5:7"). Schreibgeschützt.'
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.RangeAreas#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.RangeAreas#load:member(2)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Eigenschaften `propertyNamesAndPaths.expand` angibt, und ist eine durch trennzeichengetrennte Zeichenfolge, die die zu ladenden Navigationseigenschaften angibt.'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.RangeAreas#set:member(1)'
    summary: Legt mehrere Eigenschaften für das Objekt gleichzeitig basierend auf einem vorhandenen geladenen Objekt fest.
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.RangeAreas): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.RangeAreas:class'
  - uid: 'excel!Excel.RangeAreas#setDirty:member(1)'
    summary: Legt für das RangeAreas Neuberechnung bei der nächsten auszuführenden Neuberechnung fest.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#style:member'
    summary: 'Stellt die Formatvorlage für alle Bereiche in diesem RangeAreas-Objekt dar. Wenn die Formatvorlagen der Zellen inkonsistent sind, wird NULL zurückgegeben. Für benutzerdefinierte Formatvorlagen wird der Name der Formatvorlage zurückgegeben. Für integrierte Formatvorlagen wird eine Zeichenfolge zurückgegeben, die einen Wert in der Builtin-Enumeration darstellt.'
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#track:member(1)'
    summary: 'Nachverfolgung des Objekts zwecks automatischer Anpassung auf der Grundlage der umgebenden Änderungen im Dokument. Dieser Aufruf ist eine Kurzform für`context.trackedObjects.add(thisObject)`<!-- -->. Wenn Sie dieses Objekt für `.sync` Aufrufe und außerhalb der sequenziellen Ausführung eines ". Run"-Batches verwenden und beim Festlegen einer Eigenschaft oder beim Aufrufen einer Methode für das Objekt einen "InvalidObjectPath"-Fehler erhalten, mussten Sie das Objekt der nachverfolgten Objektauflistung hinzugefügt haben, als das Objekt zum ersten Mal erstellt wurde.'
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#untrack:member(1)'
    summary: 'Gibt den diesem Objekt zugewiesenen Arbeitsspeicher frei, wenn das Objekt zuvor nachverfolgt wurde. Bei diesem Aufruf handelt es sich um eine Kurzform`context.trackedObjects.remove(thisObject)`<!-- -->. Viele nachverfolgte Objekte verlangsamen die Ausführung der Hostanwendung, also achten Sie darauf, alle hinzugefügten Objekte nach abgeschlossener Verwendung freizugeben. Sie müssen anrufen `context.sync()` , bevor die Speicherfreigabe wirksam wird.'
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.RangeAreas#worksheet:member'
    summary: Gibt das Arbeitsblatt für das aktuelle RangeAreas zurück. Schreibgeschützt.
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!Excel.RangeCollection:class'
    name: RangeCollection
    fullName: Excel.RangeCollection
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.RangeAreas#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: RangeCopyType
    fullName: Excel.RangeCopyType
  - uid: 'excel!Excel.RangeAreas#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: DataValidation
    fullName: Excel.DataValidation
  - uid: 'excel!Excel.RangeFormat:class'
    name: RangeFormat
    fullName: Excel.RangeFormat
  - uid: 'excel!Excel.RangeAreas:class'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.RangeAreas#getIntersection~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeAreas#getIntersectionOrNullObject~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: SpecialCellType
    fullName: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: TableScopedCollection
    fullName: Excel.TableScopedCollection
  - uid: 'excel!Excel.Worksheet:class'
    name: Worksheet
    fullName: Excel.Worksheet