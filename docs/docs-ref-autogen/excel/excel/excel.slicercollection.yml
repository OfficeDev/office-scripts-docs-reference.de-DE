### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.SlicerCollection:class'
    summary: Stellt eine Auflistung aller Slicer-Objekte in der Arbeitsmappe oder einem Arbeitsblatt dar.
    name: Excel.SlicerCollection
    fullName: Excel.SlicerCollection
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.SlicerCollection#add:member(1)'
      - 'excel!Excel.SlicerCollection#context:member'
      - 'excel!Excel.SlicerCollection#getCount:member(1)'
      - 'excel!Excel.SlicerCollection#getItem:member(1)'
      - 'excel!Excel.SlicerCollection#getItemAt:member(1)'
      - 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.SlicerCollection#items:member'
      - 'excel!Excel.SlicerCollection#load:member(1)'
  - uid: 'excel!Excel.SlicerCollection#add:member(1)'
    summary: Fügt der Arbeitsmappe einen neuen Datenschnitt hinzu.
    name: 'add(slicerSource, sourceField, slicerDestination)'
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-
          Der neue datenschnitt.

          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Pivot");
              let slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          }
          ```
      parameters:
        - id: slicerSource
          description: 'Die Datenquelle, auf der der neue datenschnitt basieren soll. Dabei kann es sich um ein PivotTable-Objekt, ein Table-Objekt oder eine Zeichenfolge handeln. Wenn ein PivotTable-Objekt übergeben wird, ist die Datenquelle die Quelle des PivotTable-Objekts. Wenn ein Table-Objekt übergeben wird, ist die Datenquelle das Table-Objekt. Wenn eine Zeichenfolge übergeben wird, wird Sie als Name/ID einer PivotTable/Tabelle interpretiert.'
          type:
            - 'excel!Excel.SlicerCollection#add~0:complex'
        - id: sourceField
          description: 'Das Feld in der Datenquelle, nach dem gefiltert werden soll. Dabei kann es sich um ein PivotField-Objekt, ein Table Column-Objekt, die ID eines PivotField-Objekts oder die ID/Name-Spalte handeln.'
          type:
            - 'excel!Excel.SlicerCollection#add~1:complex'
        - id: slicerDestination
          description: 'Optional. Das Arbeitsblatt, in dem der neue datenschnitt erstellt wird. Dabei kann es sich um ein Worksheet-Objekt oder den Namen/die ID eines Arbeitsblatts handeln. Dieser Parameter kann ausgelassen werden, wenn die Slicer-Auflistung aus dem Arbeitsblatt abgerufen wird.'
          type:
            - 'excel!Excel.SlicerCollection#add~2:complex'
  - uid: 'excel!Excel.SlicerCollection#context:member'
    summary: 'Der Anforderungskontext, der mit dem Objekt verknüpft ist. Dadurch wird das Add-in-Verfahren mit dem Prozess der Office-Hostanwendung verbunden.'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.SlicerCollection#getCount:member(1)'
    summary: Gibt die Anzahl der Datenschnitte in der Sammlung zurück.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.SlicerCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.SlicerCollection#getItem:member(1)'
    summary: Ruft ein Datenschnittobjekt anhand seines Namens oder seiner ID ab.
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.caption = "Fruit Types";
              slicer.left = 395;
              slicer.top = 15;
              slicer.height = 135;
              slicer.width = 150;
              await context.sync();
          }
          ```
      parameters:
        - id: key
          description: Der Name oder die ID des datenschnitts.
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#getItemAt:member(1)'
    summary: Ruft einen Datenschnitt anhand seiner Position in der Auflistung ab.
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: index
          description: Index-Wert des abzurufenden Objekts. Nullindiziert.
          type:
            - number
  - uid: 'excel!Excel.SlicerCollection#getItemOrNullObject:member(1)'
    summary: 'Ruft einen Datenschnitt anhand seines Namens oder seiner ID ab. Wenn der Datenschnitt nicht vorhanden ist, wird ein NULL-Objekt zurückgegeben.'
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Slicer;'
      return:
        type:
          - 'excel!Excel.Slicer:class'
        description: ''
      parameters:
        - id: key
          description: 'Der Name oder die ID des datenschnitts, der abgerufen werden soll.'
          type:
            - string
  - uid: 'excel!Excel.SlicerCollection#items:member'
    summary: Ruft die geladenen untergeordneten Elemente in dieser Sammlung ab.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Slicer[];'
      return:
        type:
          - 'excel!Excel.SlicerCollection#items~0:complex'
  - uid: 'excel!Excel.SlicerCollection#load:member(1)'
    summary: Stellt einen Befehl zum Laden der angegebenen Eigenschaften des Objekts in die Warteschlange ein. Sie müssen vor `context.sync()` dem Lesen der Eigenschaften aufrufen.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: 'Eine durch trennzeichengetrennte Zeichenfolge oder ein Array von Zeichenfolgen, die die zu ladenden Eigenschaften angeben.'
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.Slicer:class'
    name: Slicer
    fullName: Excel.Slicer
  - uid: 'excel!Excel.SlicerCollection#add~0:complex'
    name: string | PivotTable | Table
    fullName: string | Excel.PivotTable | Excel.Table
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotTable:class'
        name: PivotTable
        fullName: Excel.PivotTable
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.Table:class'
        name: Table
        fullName: Excel.Table
  - uid: 'excel!Excel.SlicerCollection#add~1:complex'
    name: string | PivotField | number | TableColumn
    fullName: string | Excel.PivotField | number | Excel.TableColumn
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.PivotField:class'
        name: PivotField
        fullName: Excel.PivotField
      - name: ' | number | '
        fullName: ' | number | '
      - uid: 'excel!Excel.TableColumn:class'
        name: TableColumn
        fullName: Excel.TableColumn
  - uid: 'excel!Excel.SlicerCollection#add~2:complex'
    name: string | Worksheet
    fullName: string | Excel.Worksheet
    spec.typeScript:
      - name: 'string | '
        fullName: 'string | '
      - uid: 'excel!Excel.Worksheet:class'
        name: Worksheet
        fullName: Excel.Worksheet
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.SlicerCollection#getCount~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:class'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.SlicerCollection#items~0:complex'
    name: 'Excel.Slicer[]'
    fullName: 'Excel.Slicer[]'
    spec.typeScript:
      - uid: 'excel!Excel.Slicer:class'
        name: Excel.Slicer
        fullName: Excel.Slicer
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.SlicerCollection:class'
    name: SlicerCollection
    fullName: Excel.SlicerCollection