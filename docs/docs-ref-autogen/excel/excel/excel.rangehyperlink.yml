### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.RangeHyperlink:interface'
    summary: Stellt die erforderlichen Zeichenfolgen zum Abrufen/Festlegen eines Hyperlink-Objekts (XHL) dar.
    name: Excel.RangeHyperlink
    fullName: Excel.RangeHyperlink
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.RangeHyperlink#address:member'
      - 'excel!Excel.RangeHyperlink#documentReference:member'
      - 'excel!Excel.RangeHyperlink#screenTip:member'
      - 'excel!Excel.RangeHyperlink#textToDisplay:member'
  - uid: 'excel!Excel.RangeHyperlink#address:member'
    summary: Stellt das Ziel der URL für den Link dar.
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'address?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.RangeHyperlink#documentReference:member'
    summary: Stellt das Dokumentreferenz Ziel für den Hyperlink dar.
    name: documentReference
    fullName: documentReference
    langs:
      - typeScript
    type: property
    syntax:
      content: 'documentReference?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A9:A11");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a location within the workbook
              // for each product name in the second table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Navigate to the '" + cellText + "' worksheet",
                      documentReference: cellText + "!A1"
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.RangeHyperlink#screenTip:member'
    summary: 'Stellt die Zeichenfolge dar, die angezeigt wird, wenn mit dem Mauszeiger über den Link gefahren wird.'
    name: screenTip
    fullName: screenTip
    langs:
      - typeScript
    type: property
    syntax:
      content: 'screenTip?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.RangeHyperlink#textToDisplay:member'
    summary: 'Stellt die Zeichenfolge dar, die in der oberen linken Zelle des Bereichs angezeigt wird.'
    name: textToDisplay
    fullName: textToDisplay
    langs:
      - typeScript
    type: property
    syntax:
      content: 'textToDisplay?: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Beispiele

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```